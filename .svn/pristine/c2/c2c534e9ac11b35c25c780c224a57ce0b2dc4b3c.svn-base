/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.unison.thrift.scheme.service.gen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class BetSchemeHandlerGen {

  public interface Iface {

    public com.unison.thrift.scheme.service.gen.BetSchemeData getSchemeById(long schemeId) throws org.apache.thrift.TException;

    public boolean isCanSendShowScheme(long schemeId) throws org.apache.thrift.TException;

    public boolean updateBetSchemePublishShow(long schemeId) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getSchemeById(long schemeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void isCanSendShowScheme(long schemeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateBetSchemePublishShow(long schemeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.unison.thrift.scheme.service.gen.BetSchemeData getSchemeById(long schemeId) throws org.apache.thrift.TException
    {
      send_getSchemeById(schemeId);
      return recv_getSchemeById();
    }

    public void send_getSchemeById(long schemeId) throws org.apache.thrift.TException
    {
      getSchemeById_args args = new getSchemeById_args();
      args.setSchemeId(schemeId);
      sendBase("getSchemeById", args);
    }

    public com.unison.thrift.scheme.service.gen.BetSchemeData recv_getSchemeById() throws org.apache.thrift.TException
    {
      getSchemeById_result result = new getSchemeById_result();
      receiveBase(result, "getSchemeById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSchemeById failed: unknown result");
    }

    public boolean isCanSendShowScheme(long schemeId) throws org.apache.thrift.TException
    {
      send_isCanSendShowScheme(schemeId);
      return recv_isCanSendShowScheme();
    }

    public void send_isCanSendShowScheme(long schemeId) throws org.apache.thrift.TException
    {
      isCanSendShowScheme_args args = new isCanSendShowScheme_args();
      args.setSchemeId(schemeId);
      sendBase("isCanSendShowScheme", args);
    }

    public boolean recv_isCanSendShowScheme() throws org.apache.thrift.TException
    {
      isCanSendShowScheme_result result = new isCanSendShowScheme_result();
      receiveBase(result, "isCanSendShowScheme");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "isCanSendShowScheme failed: unknown result");
    }

    public boolean updateBetSchemePublishShow(long schemeId) throws org.apache.thrift.TException
    {
      send_updateBetSchemePublishShow(schemeId);
      return recv_updateBetSchemePublishShow();
    }

    public void send_updateBetSchemePublishShow(long schemeId) throws org.apache.thrift.TException
    {
      updateBetSchemePublishShow_args args = new updateBetSchemePublishShow_args();
      args.setSchemeId(schemeId);
      sendBase("updateBetSchemePublishShow", args);
    }

    public boolean recv_updateBetSchemePublishShow() throws org.apache.thrift.TException
    {
      updateBetSchemePublishShow_result result = new updateBetSchemePublishShow_result();
      receiveBase(result, "updateBetSchemePublishShow");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateBetSchemePublishShow failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getSchemeById(long schemeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSchemeById_call method_call = new getSchemeById_call(schemeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSchemeById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long schemeId;
      public getSchemeById_call(long schemeId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schemeId = schemeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSchemeById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSchemeById_args args = new getSchemeById_args();
        args.setSchemeId(schemeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.unison.thrift.scheme.service.gen.BetSchemeData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSchemeById();
      }
    }

    public void isCanSendShowScheme(long schemeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      isCanSendShowScheme_call method_call = new isCanSendShowScheme_call(schemeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class isCanSendShowScheme_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long schemeId;
      public isCanSendShowScheme_call(long schemeId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schemeId = schemeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("isCanSendShowScheme", org.apache.thrift.protocol.TMessageType.CALL, 0));
        isCanSendShowScheme_args args = new isCanSendShowScheme_args();
        args.setSchemeId(schemeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_isCanSendShowScheme();
      }
    }

    public void updateBetSchemePublishShow(long schemeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateBetSchemePublishShow_call method_call = new updateBetSchemePublishShow_call(schemeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateBetSchemePublishShow_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long schemeId;
      public updateBetSchemePublishShow_call(long schemeId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schemeId = schemeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateBetSchemePublishShow", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateBetSchemePublishShow_args args = new updateBetSchemePublishShow_args();
        args.setSchemeId(schemeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateBetSchemePublishShow();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getSchemeById", new getSchemeById());
      processMap.put("isCanSendShowScheme", new isCanSendShowScheme());
      processMap.put("updateBetSchemePublishShow", new updateBetSchemePublishShow());
      return processMap;
    }

    public static class getSchemeById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSchemeById_args> {
      public getSchemeById() {
        super("getSchemeById");
      }

      public getSchemeById_args getEmptyArgsInstance() {
        return new getSchemeById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSchemeById_result getResult(I iface, getSchemeById_args args) throws org.apache.thrift.TException {
        getSchemeById_result result = new getSchemeById_result();
        result.success = iface.getSchemeById(args.schemeId);
        return result;
      }
    }

    public static class isCanSendShowScheme<I extends Iface> extends org.apache.thrift.ProcessFunction<I, isCanSendShowScheme_args> {
      public isCanSendShowScheme() {
        super("isCanSendShowScheme");
      }

      public isCanSendShowScheme_args getEmptyArgsInstance() {
        return new isCanSendShowScheme_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public isCanSendShowScheme_result getResult(I iface, isCanSendShowScheme_args args) throws org.apache.thrift.TException {
        isCanSendShowScheme_result result = new isCanSendShowScheme_result();
        result.success = iface.isCanSendShowScheme(args.schemeId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class updateBetSchemePublishShow<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateBetSchemePublishShow_args> {
      public updateBetSchemePublishShow() {
        super("updateBetSchemePublishShow");
      }

      public updateBetSchemePublishShow_args getEmptyArgsInstance() {
        return new updateBetSchemePublishShow_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateBetSchemePublishShow_result getResult(I iface, updateBetSchemePublishShow_args args) throws org.apache.thrift.TException {
        updateBetSchemePublishShow_result result = new updateBetSchemePublishShow_result();
        result.success = iface.updateBetSchemePublishShow(args.schemeId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getSchemeById", new getSchemeById());
      processMap.put("isCanSendShowScheme", new isCanSendShowScheme());
      processMap.put("updateBetSchemePublishShow", new updateBetSchemePublishShow());
      return processMap;
    }

    public static class getSchemeById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSchemeById_args, com.unison.thrift.scheme.service.gen.BetSchemeData> {
      public getSchemeById() {
        super("getSchemeById");
      }

      public getSchemeById_args getEmptyArgsInstance() {
        return new getSchemeById_args();
      }

      public AsyncMethodCallback<com.unison.thrift.scheme.service.gen.BetSchemeData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.unison.thrift.scheme.service.gen.BetSchemeData>() { 
          public void onComplete(com.unison.thrift.scheme.service.gen.BetSchemeData o) {
            getSchemeById_result result = new getSchemeById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSchemeById_result result = new getSchemeById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSchemeById_args args, org.apache.thrift.async.AsyncMethodCallback<com.unison.thrift.scheme.service.gen.BetSchemeData> resultHandler) throws TException {
        iface.getSchemeById(args.schemeId,resultHandler);
      }
    }

    public static class isCanSendShowScheme<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, isCanSendShowScheme_args, Boolean> {
      public isCanSendShowScheme() {
        super("isCanSendShowScheme");
      }

      public isCanSendShowScheme_args getEmptyArgsInstance() {
        return new isCanSendShowScheme_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            isCanSendShowScheme_result result = new isCanSendShowScheme_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            isCanSendShowScheme_result result = new isCanSendShowScheme_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, isCanSendShowScheme_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.isCanSendShowScheme(args.schemeId,resultHandler);
      }
    }

    public static class updateBetSchemePublishShow<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateBetSchemePublishShow_args, Boolean> {
      public updateBetSchemePublishShow() {
        super("updateBetSchemePublishShow");
      }

      public updateBetSchemePublishShow_args getEmptyArgsInstance() {
        return new updateBetSchemePublishShow_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            updateBetSchemePublishShow_result result = new updateBetSchemePublishShow_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateBetSchemePublishShow_result result = new updateBetSchemePublishShow_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateBetSchemePublishShow_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.updateBetSchemePublishShow(args.schemeId,resultHandler);
      }
    }

  }

  public static class getSchemeById_args implements org.apache.thrift.TBase<getSchemeById_args, getSchemeById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSchemeById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSchemeById_args");

    private static final org.apache.thrift.protocol.TField SCHEME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schemeId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSchemeById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSchemeById_argsTupleSchemeFactory());
    }

    public long schemeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHEME_ID((short)1, "schemeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHEME_ID
            return SCHEME_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SCHEMEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHEME_ID, new org.apache.thrift.meta_data.FieldMetaData("schemeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSchemeById_args.class, metaDataMap);
    }

    public getSchemeById_args() {
    }

    public getSchemeById_args(
      long schemeId)
    {
      this();
      this.schemeId = schemeId;
      setSchemeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSchemeById_args(getSchemeById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.schemeId = other.schemeId;
    }

    public getSchemeById_args deepCopy() {
      return new getSchemeById_args(this);
    }

    @Override
    public void clear() {
      setSchemeIdIsSet(false);
      this.schemeId = 0;
    }

    public long getSchemeId() {
      return this.schemeId;
    }

    public getSchemeById_args setSchemeId(long schemeId) {
      this.schemeId = schemeId;
      setSchemeIdIsSet(true);
      return this;
    }

    public void unsetSchemeId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SCHEMEID_ISSET_ID);
    }

    /** Returns true if field schemeId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchemeId() {
      return EncodingUtils.testBit(__isset_bitfield, __SCHEMEID_ISSET_ID);
    }

    public void setSchemeIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SCHEMEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SCHEME_ID:
        if (value == null) {
          unsetSchemeId();
        } else {
          setSchemeId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHEME_ID:
        return Long.valueOf(getSchemeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SCHEME_ID:
        return isSetSchemeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSchemeById_args)
        return this.equals((getSchemeById_args)that);
      return false;
    }

    public boolean equals(getSchemeById_args that) {
      if (that == null)
        return false;

      boolean this_present_schemeId = true;
      boolean that_present_schemeId = true;
      if (this_present_schemeId || that_present_schemeId) {
        if (!(this_present_schemeId && that_present_schemeId))
          return false;
        if (this.schemeId != that.schemeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getSchemeById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSchemeId()).compareTo(other.isSetSchemeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchemeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schemeId, other.schemeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSchemeById_args(");
      boolean first = true;

      sb.append("schemeId:");
      sb.append(this.schemeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSchemeById_argsStandardSchemeFactory implements SchemeFactory {
      public getSchemeById_argsStandardScheme getScheme() {
        return new getSchemeById_argsStandardScheme();
      }
    }

    private static class getSchemeById_argsStandardScheme extends StandardScheme<getSchemeById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSchemeById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHEME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.schemeId = iprot.readI64();
                struct.setSchemeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSchemeById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SCHEME_ID_FIELD_DESC);
        oprot.writeI64(struct.schemeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSchemeById_argsTupleSchemeFactory implements SchemeFactory {
      public getSchemeById_argsTupleScheme getScheme() {
        return new getSchemeById_argsTupleScheme();
      }
    }

    private static class getSchemeById_argsTupleScheme extends TupleScheme<getSchemeById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSchemeById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSchemeId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSchemeId()) {
          oprot.writeI64(struct.schemeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSchemeById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.schemeId = iprot.readI64();
          struct.setSchemeIdIsSet(true);
        }
      }
    }

  }

  public static class getSchemeById_result implements org.apache.thrift.TBase<getSchemeById_result, getSchemeById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSchemeById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSchemeById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSchemeById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSchemeById_resultTupleSchemeFactory());
    }

    public com.unison.thrift.scheme.service.gen.BetSchemeData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.unison.thrift.scheme.service.gen.BetSchemeData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSchemeById_result.class, metaDataMap);
    }

    public getSchemeById_result() {
    }

    public getSchemeById_result(
      com.unison.thrift.scheme.service.gen.BetSchemeData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSchemeById_result(getSchemeById_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.unison.thrift.scheme.service.gen.BetSchemeData(other.success);
      }
    }

    public getSchemeById_result deepCopy() {
      return new getSchemeById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.unison.thrift.scheme.service.gen.BetSchemeData getSuccess() {
      return this.success;
    }

    public getSchemeById_result setSuccess(com.unison.thrift.scheme.service.gen.BetSchemeData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.unison.thrift.scheme.service.gen.BetSchemeData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSchemeById_result)
        return this.equals((getSchemeById_result)that);
      return false;
    }

    public boolean equals(getSchemeById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getSchemeById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSchemeById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSchemeById_resultStandardSchemeFactory implements SchemeFactory {
      public getSchemeById_resultStandardScheme getScheme() {
        return new getSchemeById_resultStandardScheme();
      }
    }

    private static class getSchemeById_resultStandardScheme extends StandardScheme<getSchemeById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSchemeById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.unison.thrift.scheme.service.gen.BetSchemeData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSchemeById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSchemeById_resultTupleSchemeFactory implements SchemeFactory {
      public getSchemeById_resultTupleScheme getScheme() {
        return new getSchemeById_resultTupleScheme();
      }
    }

    private static class getSchemeById_resultTupleScheme extends TupleScheme<getSchemeById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSchemeById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSchemeById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.unison.thrift.scheme.service.gen.BetSchemeData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class isCanSendShowScheme_args implements org.apache.thrift.TBase<isCanSendShowScheme_args, isCanSendShowScheme_args._Fields>, java.io.Serializable, Cloneable, Comparable<isCanSendShowScheme_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isCanSendShowScheme_args");

    private static final org.apache.thrift.protocol.TField SCHEME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schemeId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isCanSendShowScheme_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isCanSendShowScheme_argsTupleSchemeFactory());
    }

    public long schemeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHEME_ID((short)1, "schemeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHEME_ID
            return SCHEME_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SCHEMEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHEME_ID, new org.apache.thrift.meta_data.FieldMetaData("schemeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isCanSendShowScheme_args.class, metaDataMap);
    }

    public isCanSendShowScheme_args() {
    }

    public isCanSendShowScheme_args(
      long schemeId)
    {
      this();
      this.schemeId = schemeId;
      setSchemeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isCanSendShowScheme_args(isCanSendShowScheme_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.schemeId = other.schemeId;
    }

    public isCanSendShowScheme_args deepCopy() {
      return new isCanSendShowScheme_args(this);
    }

    @Override
    public void clear() {
      setSchemeIdIsSet(false);
      this.schemeId = 0;
    }

    public long getSchemeId() {
      return this.schemeId;
    }

    public isCanSendShowScheme_args setSchemeId(long schemeId) {
      this.schemeId = schemeId;
      setSchemeIdIsSet(true);
      return this;
    }

    public void unsetSchemeId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SCHEMEID_ISSET_ID);
    }

    /** Returns true if field schemeId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchemeId() {
      return EncodingUtils.testBit(__isset_bitfield, __SCHEMEID_ISSET_ID);
    }

    public void setSchemeIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SCHEMEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SCHEME_ID:
        if (value == null) {
          unsetSchemeId();
        } else {
          setSchemeId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHEME_ID:
        return Long.valueOf(getSchemeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SCHEME_ID:
        return isSetSchemeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isCanSendShowScheme_args)
        return this.equals((isCanSendShowScheme_args)that);
      return false;
    }

    public boolean equals(isCanSendShowScheme_args that) {
      if (that == null)
        return false;

      boolean this_present_schemeId = true;
      boolean that_present_schemeId = true;
      if (this_present_schemeId || that_present_schemeId) {
        if (!(this_present_schemeId && that_present_schemeId))
          return false;
        if (this.schemeId != that.schemeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(isCanSendShowScheme_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSchemeId()).compareTo(other.isSetSchemeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchemeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schemeId, other.schemeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isCanSendShowScheme_args(");
      boolean first = true;

      sb.append("schemeId:");
      sb.append(this.schemeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isCanSendShowScheme_argsStandardSchemeFactory implements SchemeFactory {
      public isCanSendShowScheme_argsStandardScheme getScheme() {
        return new isCanSendShowScheme_argsStandardScheme();
      }
    }

    private static class isCanSendShowScheme_argsStandardScheme extends StandardScheme<isCanSendShowScheme_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isCanSendShowScheme_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHEME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.schemeId = iprot.readI64();
                struct.setSchemeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isCanSendShowScheme_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SCHEME_ID_FIELD_DESC);
        oprot.writeI64(struct.schemeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isCanSendShowScheme_argsTupleSchemeFactory implements SchemeFactory {
      public isCanSendShowScheme_argsTupleScheme getScheme() {
        return new isCanSendShowScheme_argsTupleScheme();
      }
    }

    private static class isCanSendShowScheme_argsTupleScheme extends TupleScheme<isCanSendShowScheme_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isCanSendShowScheme_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSchemeId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSchemeId()) {
          oprot.writeI64(struct.schemeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isCanSendShowScheme_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.schemeId = iprot.readI64();
          struct.setSchemeIdIsSet(true);
        }
      }
    }

  }

  public static class isCanSendShowScheme_result implements org.apache.thrift.TBase<isCanSendShowScheme_result, isCanSendShowScheme_result._Fields>, java.io.Serializable, Cloneable, Comparable<isCanSendShowScheme_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isCanSendShowScheme_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isCanSendShowScheme_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isCanSendShowScheme_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isCanSendShowScheme_result.class, metaDataMap);
    }

    public isCanSendShowScheme_result() {
    }

    public isCanSendShowScheme_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isCanSendShowScheme_result(isCanSendShowScheme_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public isCanSendShowScheme_result deepCopy() {
      return new isCanSendShowScheme_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public isCanSendShowScheme_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isCanSendShowScheme_result)
        return this.equals((isCanSendShowScheme_result)that);
      return false;
    }

    public boolean equals(isCanSendShowScheme_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(isCanSendShowScheme_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isCanSendShowScheme_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isCanSendShowScheme_resultStandardSchemeFactory implements SchemeFactory {
      public isCanSendShowScheme_resultStandardScheme getScheme() {
        return new isCanSendShowScheme_resultStandardScheme();
      }
    }

    private static class isCanSendShowScheme_resultStandardScheme extends StandardScheme<isCanSendShowScheme_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isCanSendShowScheme_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isCanSendShowScheme_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isCanSendShowScheme_resultTupleSchemeFactory implements SchemeFactory {
      public isCanSendShowScheme_resultTupleScheme getScheme() {
        return new isCanSendShowScheme_resultTupleScheme();
      }
    }

    private static class isCanSendShowScheme_resultTupleScheme extends TupleScheme<isCanSendShowScheme_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isCanSendShowScheme_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isCanSendShowScheme_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateBetSchemePublishShow_args implements org.apache.thrift.TBase<updateBetSchemePublishShow_args, updateBetSchemePublishShow_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateBetSchemePublishShow_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateBetSchemePublishShow_args");

    private static final org.apache.thrift.protocol.TField SCHEME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schemeId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateBetSchemePublishShow_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateBetSchemePublishShow_argsTupleSchemeFactory());
    }

    public long schemeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHEME_ID((short)1, "schemeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHEME_ID
            return SCHEME_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SCHEMEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHEME_ID, new org.apache.thrift.meta_data.FieldMetaData("schemeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateBetSchemePublishShow_args.class, metaDataMap);
    }

    public updateBetSchemePublishShow_args() {
    }

    public updateBetSchemePublishShow_args(
      long schemeId)
    {
      this();
      this.schemeId = schemeId;
      setSchemeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateBetSchemePublishShow_args(updateBetSchemePublishShow_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.schemeId = other.schemeId;
    }

    public updateBetSchemePublishShow_args deepCopy() {
      return new updateBetSchemePublishShow_args(this);
    }

    @Override
    public void clear() {
      setSchemeIdIsSet(false);
      this.schemeId = 0;
    }

    public long getSchemeId() {
      return this.schemeId;
    }

    public updateBetSchemePublishShow_args setSchemeId(long schemeId) {
      this.schemeId = schemeId;
      setSchemeIdIsSet(true);
      return this;
    }

    public void unsetSchemeId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SCHEMEID_ISSET_ID);
    }

    /** Returns true if field schemeId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchemeId() {
      return EncodingUtils.testBit(__isset_bitfield, __SCHEMEID_ISSET_ID);
    }

    public void setSchemeIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SCHEMEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SCHEME_ID:
        if (value == null) {
          unsetSchemeId();
        } else {
          setSchemeId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHEME_ID:
        return Long.valueOf(getSchemeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SCHEME_ID:
        return isSetSchemeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateBetSchemePublishShow_args)
        return this.equals((updateBetSchemePublishShow_args)that);
      return false;
    }

    public boolean equals(updateBetSchemePublishShow_args that) {
      if (that == null)
        return false;

      boolean this_present_schemeId = true;
      boolean that_present_schemeId = true;
      if (this_present_schemeId || that_present_schemeId) {
        if (!(this_present_schemeId && that_present_schemeId))
          return false;
        if (this.schemeId != that.schemeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateBetSchemePublishShow_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSchemeId()).compareTo(other.isSetSchemeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchemeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schemeId, other.schemeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateBetSchemePublishShow_args(");
      boolean first = true;

      sb.append("schemeId:");
      sb.append(this.schemeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateBetSchemePublishShow_argsStandardSchemeFactory implements SchemeFactory {
      public updateBetSchemePublishShow_argsStandardScheme getScheme() {
        return new updateBetSchemePublishShow_argsStandardScheme();
      }
    }

    private static class updateBetSchemePublishShow_argsStandardScheme extends StandardScheme<updateBetSchemePublishShow_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateBetSchemePublishShow_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHEME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.schemeId = iprot.readI64();
                struct.setSchemeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateBetSchemePublishShow_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SCHEME_ID_FIELD_DESC);
        oprot.writeI64(struct.schemeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateBetSchemePublishShow_argsTupleSchemeFactory implements SchemeFactory {
      public updateBetSchemePublishShow_argsTupleScheme getScheme() {
        return new updateBetSchemePublishShow_argsTupleScheme();
      }
    }

    private static class updateBetSchemePublishShow_argsTupleScheme extends TupleScheme<updateBetSchemePublishShow_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateBetSchemePublishShow_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSchemeId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSchemeId()) {
          oprot.writeI64(struct.schemeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateBetSchemePublishShow_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.schemeId = iprot.readI64();
          struct.setSchemeIdIsSet(true);
        }
      }
    }

  }

  public static class updateBetSchemePublishShow_result implements org.apache.thrift.TBase<updateBetSchemePublishShow_result, updateBetSchemePublishShow_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateBetSchemePublishShow_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateBetSchemePublishShow_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateBetSchemePublishShow_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateBetSchemePublishShow_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateBetSchemePublishShow_result.class, metaDataMap);
    }

    public updateBetSchemePublishShow_result() {
    }

    public updateBetSchemePublishShow_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateBetSchemePublishShow_result(updateBetSchemePublishShow_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateBetSchemePublishShow_result deepCopy() {
      return new updateBetSchemePublishShow_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateBetSchemePublishShow_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateBetSchemePublishShow_result)
        return this.equals((updateBetSchemePublishShow_result)that);
      return false;
    }

    public boolean equals(updateBetSchemePublishShow_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateBetSchemePublishShow_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateBetSchemePublishShow_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateBetSchemePublishShow_resultStandardSchemeFactory implements SchemeFactory {
      public updateBetSchemePublishShow_resultStandardScheme getScheme() {
        return new updateBetSchemePublishShow_resultStandardScheme();
      }
    }

    private static class updateBetSchemePublishShow_resultStandardScheme extends StandardScheme<updateBetSchemePublishShow_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateBetSchemePublishShow_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateBetSchemePublishShow_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateBetSchemePublishShow_resultTupleSchemeFactory implements SchemeFactory {
      public updateBetSchemePublishShow_resultTupleScheme getScheme() {
        return new updateBetSchemePublishShow_resultTupleScheme();
      }
    }

    private static class updateBetSchemePublishShow_resultTupleScheme extends TupleScheme<updateBetSchemePublishShow_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateBetSchemePublishShow_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateBetSchemePublishShow_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
