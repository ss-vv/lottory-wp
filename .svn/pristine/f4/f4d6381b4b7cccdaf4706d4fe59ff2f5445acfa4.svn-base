/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.unison.thrift.scheme.service.gen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-1-28")
public class BetSchemeData implements org.apache.thrift.TBase<BetSchemeData, BetSchemeData._Fields>, java.io.Serializable, Cloneable, Comparable<BetSchemeData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BetSchemeData");

  private static final org.apache.thrift.protocol.TField SCHEME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schemeId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SPONSOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sponsorId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField SHOW_SCHEME_FIELD_DESC = new org.apache.thrift.protocol.TField("showScheme", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField IS_PUBLISH_SHOW_FIELD_DESC = new org.apache.thrift.protocol.TField("isPublishShow", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField FOLLOWED_SCHEME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("followedSchemeId", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField OFFTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("offtime", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField BONUS_FIELD_DESC = new org.apache.thrift.protocol.TField("bonus", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField LOTTERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryId", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField ALREADY_SHOW_FIELD_DESC = new org.apache.thrift.protocol.TField("alreadyShow", org.apache.thrift.protocol.TType.BOOL, (short)11);
  private static final org.apache.thrift.protocol.TField TOTAL_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField PURCHASED_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("purchasedAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField FLOOR_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("floorAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BetSchemeDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BetSchemeDataTupleSchemeFactory());
  }

  public long schemeId; // required
  public int type; // required
  public long sponsorId; // required
  public int showScheme; // required
  public int isPublishShow; // required
  public long followedSchemeId; // required
  public long offtime; // required
  public double bonus; // required
  public int status; // required
  public String lotteryId; // required
  public boolean alreadyShow; // required
  public double totalAmount; // required
  public double purchasedAmount; // required
  public double floorAmount; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SCHEME_ID((short)1, "schemeId"),
    TYPE((short)2, "type"),
    SPONSOR_ID((short)3, "sponsorId"),
    SHOW_SCHEME((short)4, "showScheme"),
    IS_PUBLISH_SHOW((short)5, "isPublishShow"),
    FOLLOWED_SCHEME_ID((short)6, "followedSchemeId"),
    OFFTIME((short)7, "offtime"),
    BONUS((short)8, "bonus"),
    STATUS((short)9, "status"),
    LOTTERY_ID((short)10, "lotteryId"),
    ALREADY_SHOW((short)11, "alreadyShow"),
    TOTAL_AMOUNT((short)12, "totalAmount"),
    PURCHASED_AMOUNT((short)13, "purchasedAmount"),
    FLOOR_AMOUNT((short)14, "floorAmount");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SCHEME_ID
          return SCHEME_ID;
        case 2: // TYPE
          return TYPE;
        case 3: // SPONSOR_ID
          return SPONSOR_ID;
        case 4: // SHOW_SCHEME
          return SHOW_SCHEME;
        case 5: // IS_PUBLISH_SHOW
          return IS_PUBLISH_SHOW;
        case 6: // FOLLOWED_SCHEME_ID
          return FOLLOWED_SCHEME_ID;
        case 7: // OFFTIME
          return OFFTIME;
        case 8: // BONUS
          return BONUS;
        case 9: // STATUS
          return STATUS;
        case 10: // LOTTERY_ID
          return LOTTERY_ID;
        case 11: // ALREADY_SHOW
          return ALREADY_SHOW;
        case 12: // TOTAL_AMOUNT
          return TOTAL_AMOUNT;
        case 13: // PURCHASED_AMOUNT
          return PURCHASED_AMOUNT;
        case 14: // FLOOR_AMOUNT
          return FLOOR_AMOUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SCHEMEID_ISSET_ID = 0;
  private static final int __TYPE_ISSET_ID = 1;
  private static final int __SPONSORID_ISSET_ID = 2;
  private static final int __SHOWSCHEME_ISSET_ID = 3;
  private static final int __ISPUBLISHSHOW_ISSET_ID = 4;
  private static final int __FOLLOWEDSCHEMEID_ISSET_ID = 5;
  private static final int __OFFTIME_ISSET_ID = 6;
  private static final int __BONUS_ISSET_ID = 7;
  private static final int __STATUS_ISSET_ID = 8;
  private static final int __ALREADYSHOW_ISSET_ID = 9;
  private static final int __TOTALAMOUNT_ISSET_ID = 10;
  private static final int __PURCHASEDAMOUNT_ISSET_ID = 11;
  private static final int __FLOORAMOUNT_ISSET_ID = 12;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SCHEME_ID, new org.apache.thrift.meta_data.FieldMetaData("schemeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SPONSOR_ID, new org.apache.thrift.meta_data.FieldMetaData("sponsorId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SHOW_SCHEME, new org.apache.thrift.meta_data.FieldMetaData("showScheme", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_PUBLISH_SHOW, new org.apache.thrift.meta_data.FieldMetaData("isPublishShow", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FOLLOWED_SCHEME_ID, new org.apache.thrift.meta_data.FieldMetaData("followedSchemeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OFFTIME, new org.apache.thrift.meta_data.FieldMetaData("offtime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BONUS, new org.apache.thrift.meta_data.FieldMetaData("bonus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOTTERY_ID, new org.apache.thrift.meta_data.FieldMetaData("lotteryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALREADY_SHOW, new org.apache.thrift.meta_data.FieldMetaData("alreadyShow", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TOTAL_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("totalAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PURCHASED_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("purchasedAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FLOOR_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("floorAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BetSchemeData.class, metaDataMap);
  }

  public BetSchemeData() {
  }

  public BetSchemeData(
    long schemeId,
    int type,
    long sponsorId,
    int showScheme,
    int isPublishShow,
    long followedSchemeId,
    long offtime,
    double bonus,
    int status,
    String lotteryId,
    boolean alreadyShow,
    double totalAmount,
    double purchasedAmount,
    double floorAmount)
  {
    this();
    this.schemeId = schemeId;
    setSchemeIdIsSet(true);
    this.type = type;
    setTypeIsSet(true);
    this.sponsorId = sponsorId;
    setSponsorIdIsSet(true);
    this.showScheme = showScheme;
    setShowSchemeIsSet(true);
    this.isPublishShow = isPublishShow;
    setIsPublishShowIsSet(true);
    this.followedSchemeId = followedSchemeId;
    setFollowedSchemeIdIsSet(true);
    this.offtime = offtime;
    setOfftimeIsSet(true);
    this.bonus = bonus;
    setBonusIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.lotteryId = lotteryId;
    this.alreadyShow = alreadyShow;
    setAlreadyShowIsSet(true);
    this.totalAmount = totalAmount;
    setTotalAmountIsSet(true);
    this.purchasedAmount = purchasedAmount;
    setPurchasedAmountIsSet(true);
    this.floorAmount = floorAmount;
    setFloorAmountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BetSchemeData(BetSchemeData other) {
    __isset_bitfield = other.__isset_bitfield;
    this.schemeId = other.schemeId;
    this.type = other.type;
    this.sponsorId = other.sponsorId;
    this.showScheme = other.showScheme;
    this.isPublishShow = other.isPublishShow;
    this.followedSchemeId = other.followedSchemeId;
    this.offtime = other.offtime;
    this.bonus = other.bonus;
    this.status = other.status;
    if (other.isSetLotteryId()) {
      this.lotteryId = other.lotteryId;
    }
    this.alreadyShow = other.alreadyShow;
    this.totalAmount = other.totalAmount;
    this.purchasedAmount = other.purchasedAmount;
    this.floorAmount = other.floorAmount;
  }

  public BetSchemeData deepCopy() {
    return new BetSchemeData(this);
  }

  @Override
  public void clear() {
    setSchemeIdIsSet(false);
    this.schemeId = 0;
    setTypeIsSet(false);
    this.type = 0;
    setSponsorIdIsSet(false);
    this.sponsorId = 0;
    setShowSchemeIsSet(false);
    this.showScheme = 0;
    setIsPublishShowIsSet(false);
    this.isPublishShow = 0;
    setFollowedSchemeIdIsSet(false);
    this.followedSchemeId = 0;
    setOfftimeIsSet(false);
    this.offtime = 0;
    setBonusIsSet(false);
    this.bonus = 0.0;
    setStatusIsSet(false);
    this.status = 0;
    this.lotteryId = null;
    setAlreadyShowIsSet(false);
    this.alreadyShow = false;
    setTotalAmountIsSet(false);
    this.totalAmount = 0.0;
    setPurchasedAmountIsSet(false);
    this.purchasedAmount = 0.0;
    setFloorAmountIsSet(false);
    this.floorAmount = 0.0;
  }

  public long getSchemeId() {
    return this.schemeId;
  }

  public BetSchemeData setSchemeId(long schemeId) {
    this.schemeId = schemeId;
    setSchemeIdIsSet(true);
    return this;
  }

  public void unsetSchemeId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SCHEMEID_ISSET_ID);
  }

  /** Returns true if field schemeId is set (has been assigned a value) and false otherwise */
  public boolean isSetSchemeId() {
    return EncodingUtils.testBit(__isset_bitfield, __SCHEMEID_ISSET_ID);
  }

  public void setSchemeIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SCHEMEID_ISSET_ID, value);
  }

  public int getType() {
    return this.type;
  }

  public BetSchemeData setType(int type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  public long getSponsorId() {
    return this.sponsorId;
  }

  public BetSchemeData setSponsorId(long sponsorId) {
    this.sponsorId = sponsorId;
    setSponsorIdIsSet(true);
    return this;
  }

  public void unsetSponsorId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPONSORID_ISSET_ID);
  }

  /** Returns true if field sponsorId is set (has been assigned a value) and false otherwise */
  public boolean isSetSponsorId() {
    return EncodingUtils.testBit(__isset_bitfield, __SPONSORID_ISSET_ID);
  }

  public void setSponsorIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPONSORID_ISSET_ID, value);
  }

  public int getShowScheme() {
    return this.showScheme;
  }

  public BetSchemeData setShowScheme(int showScheme) {
    this.showScheme = showScheme;
    setShowSchemeIsSet(true);
    return this;
  }

  public void unsetShowScheme() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOWSCHEME_ISSET_ID);
  }

  /** Returns true if field showScheme is set (has been assigned a value) and false otherwise */
  public boolean isSetShowScheme() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOWSCHEME_ISSET_ID);
  }

  public void setShowSchemeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOWSCHEME_ISSET_ID, value);
  }

  public int getIsPublishShow() {
    return this.isPublishShow;
  }

  public BetSchemeData setIsPublishShow(int isPublishShow) {
    this.isPublishShow = isPublishShow;
    setIsPublishShowIsSet(true);
    return this;
  }

  public void unsetIsPublishShow() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISPUBLISHSHOW_ISSET_ID);
  }

  /** Returns true if field isPublishShow is set (has been assigned a value) and false otherwise */
  public boolean isSetIsPublishShow() {
    return EncodingUtils.testBit(__isset_bitfield, __ISPUBLISHSHOW_ISSET_ID);
  }

  public void setIsPublishShowIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISPUBLISHSHOW_ISSET_ID, value);
  }

  public long getFollowedSchemeId() {
    return this.followedSchemeId;
  }

  public BetSchemeData setFollowedSchemeId(long followedSchemeId) {
    this.followedSchemeId = followedSchemeId;
    setFollowedSchemeIdIsSet(true);
    return this;
  }

  public void unsetFollowedSchemeId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FOLLOWEDSCHEMEID_ISSET_ID);
  }

  /** Returns true if field followedSchemeId is set (has been assigned a value) and false otherwise */
  public boolean isSetFollowedSchemeId() {
    return EncodingUtils.testBit(__isset_bitfield, __FOLLOWEDSCHEMEID_ISSET_ID);
  }

  public void setFollowedSchemeIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FOLLOWEDSCHEMEID_ISSET_ID, value);
  }

  public long getOfftime() {
    return this.offtime;
  }

  public BetSchemeData setOfftime(long offtime) {
    this.offtime = offtime;
    setOfftimeIsSet(true);
    return this;
  }

  public void unsetOfftime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OFFTIME_ISSET_ID);
  }

  /** Returns true if field offtime is set (has been assigned a value) and false otherwise */
  public boolean isSetOfftime() {
    return EncodingUtils.testBit(__isset_bitfield, __OFFTIME_ISSET_ID);
  }

  public void setOfftimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OFFTIME_ISSET_ID, value);
  }

  public double getBonus() {
    return this.bonus;
  }

  public BetSchemeData setBonus(double bonus) {
    this.bonus = bonus;
    setBonusIsSet(true);
    return this;
  }

  public void unsetBonus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BONUS_ISSET_ID);
  }

  /** Returns true if field bonus is set (has been assigned a value) and false otherwise */
  public boolean isSetBonus() {
    return EncodingUtils.testBit(__isset_bitfield, __BONUS_ISSET_ID);
  }

  public void setBonusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BONUS_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public BetSchemeData setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getLotteryId() {
    return this.lotteryId;
  }

  public BetSchemeData setLotteryId(String lotteryId) {
    this.lotteryId = lotteryId;
    return this;
  }

  public void unsetLotteryId() {
    this.lotteryId = null;
  }

  /** Returns true if field lotteryId is set (has been assigned a value) and false otherwise */
  public boolean isSetLotteryId() {
    return this.lotteryId != null;
  }

  public void setLotteryIdIsSet(boolean value) {
    if (!value) {
      this.lotteryId = null;
    }
  }

  public boolean isAlreadyShow() {
    return this.alreadyShow;
  }

  public BetSchemeData setAlreadyShow(boolean alreadyShow) {
    this.alreadyShow = alreadyShow;
    setAlreadyShowIsSet(true);
    return this;
  }

  public void unsetAlreadyShow() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALREADYSHOW_ISSET_ID);
  }

  /** Returns true if field alreadyShow is set (has been assigned a value) and false otherwise */
  public boolean isSetAlreadyShow() {
    return EncodingUtils.testBit(__isset_bitfield, __ALREADYSHOW_ISSET_ID);
  }

  public void setAlreadyShowIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALREADYSHOW_ISSET_ID, value);
  }

  public double getTotalAmount() {
    return this.totalAmount;
  }

  public BetSchemeData setTotalAmount(double totalAmount) {
    this.totalAmount = totalAmount;
    setTotalAmountIsSet(true);
    return this;
  }

  public void unsetTotalAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALAMOUNT_ISSET_ID);
  }

  /** Returns true if field totalAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALAMOUNT_ISSET_ID);
  }

  public void setTotalAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALAMOUNT_ISSET_ID, value);
  }

  public double getPurchasedAmount() {
    return this.purchasedAmount;
  }

  public BetSchemeData setPurchasedAmount(double purchasedAmount) {
    this.purchasedAmount = purchasedAmount;
    setPurchasedAmountIsSet(true);
    return this;
  }

  public void unsetPurchasedAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PURCHASEDAMOUNT_ISSET_ID);
  }

  /** Returns true if field purchasedAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetPurchasedAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __PURCHASEDAMOUNT_ISSET_ID);
  }

  public void setPurchasedAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PURCHASEDAMOUNT_ISSET_ID, value);
  }

  public double getFloorAmount() {
    return this.floorAmount;
  }

  public BetSchemeData setFloorAmount(double floorAmount) {
    this.floorAmount = floorAmount;
    setFloorAmountIsSet(true);
    return this;
  }

  public void unsetFloorAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FLOORAMOUNT_ISSET_ID);
  }

  /** Returns true if field floorAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetFloorAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __FLOORAMOUNT_ISSET_ID);
  }

  public void setFloorAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FLOORAMOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SCHEME_ID:
      if (value == null) {
        unsetSchemeId();
      } else {
        setSchemeId((Long)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Integer)value);
      }
      break;

    case SPONSOR_ID:
      if (value == null) {
        unsetSponsorId();
      } else {
        setSponsorId((Long)value);
      }
      break;

    case SHOW_SCHEME:
      if (value == null) {
        unsetShowScheme();
      } else {
        setShowScheme((Integer)value);
      }
      break;

    case IS_PUBLISH_SHOW:
      if (value == null) {
        unsetIsPublishShow();
      } else {
        setIsPublishShow((Integer)value);
      }
      break;

    case FOLLOWED_SCHEME_ID:
      if (value == null) {
        unsetFollowedSchemeId();
      } else {
        setFollowedSchemeId((Long)value);
      }
      break;

    case OFFTIME:
      if (value == null) {
        unsetOfftime();
      } else {
        setOfftime((Long)value);
      }
      break;

    case BONUS:
      if (value == null) {
        unsetBonus();
      } else {
        setBonus((Double)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case LOTTERY_ID:
      if (value == null) {
        unsetLotteryId();
      } else {
        setLotteryId((String)value);
      }
      break;

    case ALREADY_SHOW:
      if (value == null) {
        unsetAlreadyShow();
      } else {
        setAlreadyShow((Boolean)value);
      }
      break;

    case TOTAL_AMOUNT:
      if (value == null) {
        unsetTotalAmount();
      } else {
        setTotalAmount((Double)value);
      }
      break;

    case PURCHASED_AMOUNT:
      if (value == null) {
        unsetPurchasedAmount();
      } else {
        setPurchasedAmount((Double)value);
      }
      break;

    case FLOOR_AMOUNT:
      if (value == null) {
        unsetFloorAmount();
      } else {
        setFloorAmount((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SCHEME_ID:
      return Long.valueOf(getSchemeId());

    case TYPE:
      return Integer.valueOf(getType());

    case SPONSOR_ID:
      return Long.valueOf(getSponsorId());

    case SHOW_SCHEME:
      return Integer.valueOf(getShowScheme());

    case IS_PUBLISH_SHOW:
      return Integer.valueOf(getIsPublishShow());

    case FOLLOWED_SCHEME_ID:
      return Long.valueOf(getFollowedSchemeId());

    case OFFTIME:
      return Long.valueOf(getOfftime());

    case BONUS:
      return Double.valueOf(getBonus());

    case STATUS:
      return Integer.valueOf(getStatus());

    case LOTTERY_ID:
      return getLotteryId();

    case ALREADY_SHOW:
      return Boolean.valueOf(isAlreadyShow());

    case TOTAL_AMOUNT:
      return Double.valueOf(getTotalAmount());

    case PURCHASED_AMOUNT:
      return Double.valueOf(getPurchasedAmount());

    case FLOOR_AMOUNT:
      return Double.valueOf(getFloorAmount());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SCHEME_ID:
      return isSetSchemeId();
    case TYPE:
      return isSetType();
    case SPONSOR_ID:
      return isSetSponsorId();
    case SHOW_SCHEME:
      return isSetShowScheme();
    case IS_PUBLISH_SHOW:
      return isSetIsPublishShow();
    case FOLLOWED_SCHEME_ID:
      return isSetFollowedSchemeId();
    case OFFTIME:
      return isSetOfftime();
    case BONUS:
      return isSetBonus();
    case STATUS:
      return isSetStatus();
    case LOTTERY_ID:
      return isSetLotteryId();
    case ALREADY_SHOW:
      return isSetAlreadyShow();
    case TOTAL_AMOUNT:
      return isSetTotalAmount();
    case PURCHASED_AMOUNT:
      return isSetPurchasedAmount();
    case FLOOR_AMOUNT:
      return isSetFloorAmount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BetSchemeData)
      return this.equals((BetSchemeData)that);
    return false;
  }

  public boolean equals(BetSchemeData that) {
    if (that == null)
      return false;

    boolean this_present_schemeId = true;
    boolean that_present_schemeId = true;
    if (this_present_schemeId || that_present_schemeId) {
      if (!(this_present_schemeId && that_present_schemeId))
        return false;
      if (this.schemeId != that.schemeId)
        return false;
    }

    boolean this_present_type = true;
    boolean that_present_type = true;
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_sponsorId = true;
    boolean that_present_sponsorId = true;
    if (this_present_sponsorId || that_present_sponsorId) {
      if (!(this_present_sponsorId && that_present_sponsorId))
        return false;
      if (this.sponsorId != that.sponsorId)
        return false;
    }

    boolean this_present_showScheme = true;
    boolean that_present_showScheme = true;
    if (this_present_showScheme || that_present_showScheme) {
      if (!(this_present_showScheme && that_present_showScheme))
        return false;
      if (this.showScheme != that.showScheme)
        return false;
    }

    boolean this_present_isPublishShow = true;
    boolean that_present_isPublishShow = true;
    if (this_present_isPublishShow || that_present_isPublishShow) {
      if (!(this_present_isPublishShow && that_present_isPublishShow))
        return false;
      if (this.isPublishShow != that.isPublishShow)
        return false;
    }

    boolean this_present_followedSchemeId = true;
    boolean that_present_followedSchemeId = true;
    if (this_present_followedSchemeId || that_present_followedSchemeId) {
      if (!(this_present_followedSchemeId && that_present_followedSchemeId))
        return false;
      if (this.followedSchemeId != that.followedSchemeId)
        return false;
    }

    boolean this_present_offtime = true;
    boolean that_present_offtime = true;
    if (this_present_offtime || that_present_offtime) {
      if (!(this_present_offtime && that_present_offtime))
        return false;
      if (this.offtime != that.offtime)
        return false;
    }

    boolean this_present_bonus = true;
    boolean that_present_bonus = true;
    if (this_present_bonus || that_present_bonus) {
      if (!(this_present_bonus && that_present_bonus))
        return false;
      if (this.bonus != that.bonus)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_lotteryId = true && this.isSetLotteryId();
    boolean that_present_lotteryId = true && that.isSetLotteryId();
    if (this_present_lotteryId || that_present_lotteryId) {
      if (!(this_present_lotteryId && that_present_lotteryId))
        return false;
      if (!this.lotteryId.equals(that.lotteryId))
        return false;
    }

    boolean this_present_alreadyShow = true;
    boolean that_present_alreadyShow = true;
    if (this_present_alreadyShow || that_present_alreadyShow) {
      if (!(this_present_alreadyShow && that_present_alreadyShow))
        return false;
      if (this.alreadyShow != that.alreadyShow)
        return false;
    }

    boolean this_present_totalAmount = true;
    boolean that_present_totalAmount = true;
    if (this_present_totalAmount || that_present_totalAmount) {
      if (!(this_present_totalAmount && that_present_totalAmount))
        return false;
      if (this.totalAmount != that.totalAmount)
        return false;
    }

    boolean this_present_purchasedAmount = true;
    boolean that_present_purchasedAmount = true;
    if (this_present_purchasedAmount || that_present_purchasedAmount) {
      if (!(this_present_purchasedAmount && that_present_purchasedAmount))
        return false;
      if (this.purchasedAmount != that.purchasedAmount)
        return false;
    }

    boolean this_present_floorAmount = true;
    boolean that_present_floorAmount = true;
    if (this_present_floorAmount || that_present_floorAmount) {
      if (!(this_present_floorAmount && that_present_floorAmount))
        return false;
      if (this.floorAmount != that.floorAmount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_schemeId = true;
    list.add(present_schemeId);
    if (present_schemeId)
      list.add(schemeId);

    boolean present_type = true;
    list.add(present_type);
    if (present_type)
      list.add(type);

    boolean present_sponsorId = true;
    list.add(present_sponsorId);
    if (present_sponsorId)
      list.add(sponsorId);

    boolean present_showScheme = true;
    list.add(present_showScheme);
    if (present_showScheme)
      list.add(showScheme);

    boolean present_isPublishShow = true;
    list.add(present_isPublishShow);
    if (present_isPublishShow)
      list.add(isPublishShow);

    boolean present_followedSchemeId = true;
    list.add(present_followedSchemeId);
    if (present_followedSchemeId)
      list.add(followedSchemeId);

    boolean present_offtime = true;
    list.add(present_offtime);
    if (present_offtime)
      list.add(offtime);

    boolean present_bonus = true;
    list.add(present_bonus);
    if (present_bonus)
      list.add(bonus);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_lotteryId = true && (isSetLotteryId());
    list.add(present_lotteryId);
    if (present_lotteryId)
      list.add(lotteryId);

    boolean present_alreadyShow = true;
    list.add(present_alreadyShow);
    if (present_alreadyShow)
      list.add(alreadyShow);

    boolean present_totalAmount = true;
    list.add(present_totalAmount);
    if (present_totalAmount)
      list.add(totalAmount);

    boolean present_purchasedAmount = true;
    list.add(present_purchasedAmount);
    if (present_purchasedAmount)
      list.add(purchasedAmount);

    boolean present_floorAmount = true;
    list.add(present_floorAmount);
    if (present_floorAmount)
      list.add(floorAmount);

    return list.hashCode();
  }

  @Override
  public int compareTo(BetSchemeData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSchemeId()).compareTo(other.isSetSchemeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchemeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schemeId, other.schemeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSponsorId()).compareTo(other.isSetSponsorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSponsorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sponsorId, other.sponsorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShowScheme()).compareTo(other.isSetShowScheme());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShowScheme()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.showScheme, other.showScheme);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsPublishShow()).compareTo(other.isSetIsPublishShow());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsPublishShow()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isPublishShow, other.isPublishShow);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFollowedSchemeId()).compareTo(other.isSetFollowedSchemeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFollowedSchemeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.followedSchemeId, other.followedSchemeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOfftime()).compareTo(other.isSetOfftime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOfftime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offtime, other.offtime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBonus()).compareTo(other.isSetBonus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBonus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bonus, other.bonus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLotteryId()).compareTo(other.isSetLotteryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLotteryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryId, other.lotteryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlreadyShow()).compareTo(other.isSetAlreadyShow());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlreadyShow()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alreadyShow, other.alreadyShow);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalAmount()).compareTo(other.isSetTotalAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalAmount, other.totalAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPurchasedAmount()).compareTo(other.isSetPurchasedAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPurchasedAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.purchasedAmount, other.purchasedAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFloorAmount()).compareTo(other.isSetFloorAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFloorAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.floorAmount, other.floorAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BetSchemeData(");
    boolean first = true;

    sb.append("schemeId:");
    sb.append(this.schemeId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    sb.append(this.type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sponsorId:");
    sb.append(this.sponsorId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("showScheme:");
    sb.append(this.showScheme);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isPublishShow:");
    sb.append(this.isPublishShow);
    first = false;
    if (!first) sb.append(", ");
    sb.append("followedSchemeId:");
    sb.append(this.followedSchemeId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("offtime:");
    sb.append(this.offtime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bonus:");
    sb.append(this.bonus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lotteryId:");
    if (this.lotteryId == null) {
      sb.append("null");
    } else {
      sb.append(this.lotteryId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("alreadyShow:");
    sb.append(this.alreadyShow);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalAmount:");
    sb.append(this.totalAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("purchasedAmount:");
    sb.append(this.purchasedAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("floorAmount:");
    sb.append(this.floorAmount);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BetSchemeDataStandardSchemeFactory implements SchemeFactory {
    public BetSchemeDataStandardScheme getScheme() {
      return new BetSchemeDataStandardScheme();
    }
  }

  private static class BetSchemeDataStandardScheme extends StandardScheme<BetSchemeData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BetSchemeData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SCHEME_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.schemeId = iprot.readI64();
              struct.setSchemeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = iprot.readI32();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SPONSOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sponsorId = iprot.readI64();
              struct.setSponsorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SHOW_SCHEME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.showScheme = iprot.readI32();
              struct.setShowSchemeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_PUBLISH_SHOW
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isPublishShow = iprot.readI32();
              struct.setIsPublishShowIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FOLLOWED_SCHEME_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.followedSchemeId = iprot.readI64();
              struct.setFollowedSchemeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // OFFTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.offtime = iprot.readI64();
              struct.setOfftimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BONUS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.bonus = iprot.readDouble();
              struct.setBonusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LOTTERY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lotteryId = iprot.readString();
              struct.setLotteryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ALREADY_SHOW
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.alreadyShow = iprot.readBool();
              struct.setAlreadyShowIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TOTAL_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totalAmount = iprot.readDouble();
              struct.setTotalAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PURCHASED_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.purchasedAmount = iprot.readDouble();
              struct.setPurchasedAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // FLOOR_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.floorAmount = iprot.readDouble();
              struct.setFloorAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BetSchemeData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SCHEME_ID_FIELD_DESC);
      oprot.writeI64(struct.schemeId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(struct.type);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SPONSOR_ID_FIELD_DESC);
      oprot.writeI64(struct.sponsorId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHOW_SCHEME_FIELD_DESC);
      oprot.writeI32(struct.showScheme);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_PUBLISH_SHOW_FIELD_DESC);
      oprot.writeI32(struct.isPublishShow);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FOLLOWED_SCHEME_ID_FIELD_DESC);
      oprot.writeI64(struct.followedSchemeId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OFFTIME_FIELD_DESC);
      oprot.writeI64(struct.offtime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BONUS_FIELD_DESC);
      oprot.writeDouble(struct.bonus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.lotteryId != null) {
        oprot.writeFieldBegin(LOTTERY_ID_FIELD_DESC);
        oprot.writeString(struct.lotteryId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ALREADY_SHOW_FIELD_DESC);
      oprot.writeBool(struct.alreadyShow);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_AMOUNT_FIELD_DESC);
      oprot.writeDouble(struct.totalAmount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PURCHASED_AMOUNT_FIELD_DESC);
      oprot.writeDouble(struct.purchasedAmount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FLOOR_AMOUNT_FIELD_DESC);
      oprot.writeDouble(struct.floorAmount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BetSchemeDataTupleSchemeFactory implements SchemeFactory {
    public BetSchemeDataTupleScheme getScheme() {
      return new BetSchemeDataTupleScheme();
    }
  }

  private static class BetSchemeDataTupleScheme extends TupleScheme<BetSchemeData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BetSchemeData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSchemeId()) {
        optionals.set(0);
      }
      if (struct.isSetType()) {
        optionals.set(1);
      }
      if (struct.isSetSponsorId()) {
        optionals.set(2);
      }
      if (struct.isSetShowScheme()) {
        optionals.set(3);
      }
      if (struct.isSetIsPublishShow()) {
        optionals.set(4);
      }
      if (struct.isSetFollowedSchemeId()) {
        optionals.set(5);
      }
      if (struct.isSetOfftime()) {
        optionals.set(6);
      }
      if (struct.isSetBonus()) {
        optionals.set(7);
      }
      if (struct.isSetStatus()) {
        optionals.set(8);
      }
      if (struct.isSetLotteryId()) {
        optionals.set(9);
      }
      if (struct.isSetAlreadyShow()) {
        optionals.set(10);
      }
      if (struct.isSetTotalAmount()) {
        optionals.set(11);
      }
      if (struct.isSetPurchasedAmount()) {
        optionals.set(12);
      }
      if (struct.isSetFloorAmount()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetSchemeId()) {
        oprot.writeI64(struct.schemeId);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type);
      }
      if (struct.isSetSponsorId()) {
        oprot.writeI64(struct.sponsorId);
      }
      if (struct.isSetShowScheme()) {
        oprot.writeI32(struct.showScheme);
      }
      if (struct.isSetIsPublishShow()) {
        oprot.writeI32(struct.isPublishShow);
      }
      if (struct.isSetFollowedSchemeId()) {
        oprot.writeI64(struct.followedSchemeId);
      }
      if (struct.isSetOfftime()) {
        oprot.writeI64(struct.offtime);
      }
      if (struct.isSetBonus()) {
        oprot.writeDouble(struct.bonus);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetLotteryId()) {
        oprot.writeString(struct.lotteryId);
      }
      if (struct.isSetAlreadyShow()) {
        oprot.writeBool(struct.alreadyShow);
      }
      if (struct.isSetTotalAmount()) {
        oprot.writeDouble(struct.totalAmount);
      }
      if (struct.isSetPurchasedAmount()) {
        oprot.writeDouble(struct.purchasedAmount);
      }
      if (struct.isSetFloorAmount()) {
        oprot.writeDouble(struct.floorAmount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BetSchemeData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.schemeId = iprot.readI64();
        struct.setSchemeIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.type = iprot.readI32();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.sponsorId = iprot.readI64();
        struct.setSponsorIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.showScheme = iprot.readI32();
        struct.setShowSchemeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.isPublishShow = iprot.readI32();
        struct.setIsPublishShowIsSet(true);
      }
      if (incoming.get(5)) {
        struct.followedSchemeId = iprot.readI64();
        struct.setFollowedSchemeIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.offtime = iprot.readI64();
        struct.setOfftimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.bonus = iprot.readDouble();
        struct.setBonusIsSet(true);
      }
      if (incoming.get(8)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(9)) {
        struct.lotteryId = iprot.readString();
        struct.setLotteryIdIsSet(true);
      }
      if (incoming.get(10)) {
        struct.alreadyShow = iprot.readBool();
        struct.setAlreadyShowIsSet(true);
      }
      if (incoming.get(11)) {
        struct.totalAmount = iprot.readDouble();
        struct.setTotalAmountIsSet(true);
      }
      if (incoming.get(12)) {
        struct.purchasedAmount = iprot.readDouble();
        struct.setPurchasedAmountIsSet(true);
      }
      if (incoming.get(13)) {
        struct.floorAmount = iprot.readDouble();
        struct.setFloorAmountIsSet(true);
      }
    }
  }

}

