<?xml version="1.0" encoding="UTF-8" ?>

<schema name="example" version="1.5">
	<fields>
		<field name="_version_" type="long" indexed="true" stored="true" />

		<field name="_root_" type="string" indexed="true" stored="false" />

		<field name="id" type="string" indexed="true" stored="true"
			required="true" multiValued="false" />
		
		<!-- 微博昵称 -->
		<field name="name" type="text_general" indexed="true" stored="true" />
		
		<field name="weiboContent" type="text_cn_IK" indexed="true" stored="false" />
		<field name="contentType" type="string" indexed="true" stored="true" />
		<field name="weiboType" type="string" indexed="true" stored="true" />
		<field name="createTime" type="long" indexed="true" stored="true" />

		<!-- 赛事索引 开始 -->
		<field name="matchName" type="text_cn" indexed="true" stored="true" />
		<field name="matchCode" type="string" indexed="true" stored="true" />
		<field name="matchID" type="string" indexed="false" stored="true" />
		<field name="entrustDeadline" type="string" indexed="false" stored="true" />
		<field name="lotteryType" type="string" indexed="true" stored="true" />
		<field name="matchTime" type="long" indexed="false" stored="true" />
		<!-- 赛事索引 结束 -->
		
		<field name="text" type="text_general" indexed="true" stored="false"
			multiValued="true" />
			
		<field name="title" type="text_cn_IK" indexed="true" stored="true"
			multiValued="true" />
	</fields>

	<uniqueKey>id</uniqueKey>

	<defaultSearchField>text</defaultSearchField>

	<!-- DEPRECATED: The defaultOperator (AND|OR) is consulted by various query 
		parsers when parsing a query string to determine if a clause of the query 
		should be marked as required or optional, assuming the clause isn't already 
		marked by some operator. The default is OR, which is generally assumed so 
		it is not a good idea to change it globally here. The "q.op" request parameter 
		takes precedence over this.-->
	<solrQueryParser defaultOperator="OR"/> 

	<!-- copyField commands copy one field to another at the time a document 
		is added to the index. It's used either to index the same field differently, 
		or to add multiple fields to the same field for easier/faster searching. -->

	<copyField source="matchName" dest="text" />
	<copyField source="matchCode" dest="text" />
	<copyField source="name" dest="text" />

	<types>
		<fieldType name="text_cn" class="solr.TextField">  
	    	<analyzer class="org.apache.lucene.analysis.cn.smart.SmartChineseAnalyzer"/>  
		</fieldType> 

		<fieldType name="text_cn_IK" class="solr.TextField"> 
			<analyzer class="org.wltea.analyzer.lucene.IKAnalyzer"/> 
		</fieldType>
		<!-- The StrField type is not analyzed, but indexed/stored verbatim. It 
			supports doc values but in that case the field needs to be single-valued 
			and either required or have a default value. -->
		<fieldType name="string" class="solr.StrField"
			sortMissingLast="true" />

		<fieldType name="boolean" class="solr.BoolField"
			sortMissingLast="true" />

		<fieldType name="int" class="solr.TrieIntField"
			precisionStep="0" positionIncrementGap="0" />
		<fieldType name="float" class="solr.TrieFloatField"
			precisionStep="0" positionIncrementGap="0" />
		<fieldType name="long" class="solr.TrieLongField"
			precisionStep="0" positionIncrementGap="0" />
		<fieldType name="double" class="solr.TrieDoubleField"
			precisionStep="0" positionIncrementGap="0" />

		<fieldType name="tint" class="solr.TrieIntField"
			precisionStep="8" positionIncrementGap="0" />
		<fieldType name="tfloat" class="solr.TrieFloatField"
			precisionStep="8" positionIncrementGap="0" />
		<fieldType name="tlong" class="solr.TrieLongField"
			precisionStep="8" positionIncrementGap="0" />
		<fieldType name="tdouble" class="solr.TrieDoubleField"
			precisionStep="8" positionIncrementGap="0" />

		<!-- The format for this date field is of the form 1995-12-31T23:59:59Z, 
			and is a more restricted form of the canonical representation of dateTime 
			http://www.w3.org/TR/xmlschema-2/#dateTime The trailing "Z" designates UTC 
			time and is mandatory. Optional fractional seconds are allowed: 1995-12-31T23:59:59.999Z 
			All other components are mandatory. Expressions can also be used to denote 
			calculations that should be performed relative to "NOW" to determine the 
			value, ie... NOW/HOUR ... Round to the start of the current hour NOW-1DAY 
			... Exactly 1 day prior to now NOW/DAY+6MONTHS+3DAYS ... 6 months and 3 days 
			in the future from the start of the current day Consult the DateField javadocs 
			for more information. Note: For faster range queries, consider the tdate 
			type -->
		<fieldType name="date" class="solr.TrieDateField"
			precisionStep="0" positionIncrementGap="0" />

		<!-- A Trie based date field for faster date range queries and date faceting. -->
		<fieldType name="tdate" class="solr.TrieDateField"
			precisionStep="6" positionIncrementGap="0" />


		<!--Binary data type. The data should be sent/retrieved in as Base64 encoded 
			Strings -->
		<fieldtype name="binary" class="solr.BinaryField" />

		<!-- A text field that only splits on whitespace for exact matching of 
			words -->
		<fieldType name="text_ws" class="solr.TextField"
			positionIncrementGap="100">
			<analyzer>
				<tokenizer class="solr.WhitespaceTokenizerFactory" />
			</analyzer>
		</fieldType>

		<!-- A general text field that has reasonable, generic cross-language defaults: 
			it tokenizes with StandardTokenizer, removes stop words from case-insensitive 
			"stopwords.txt" (empty by default), and down cases. At query time only, it 
			also applies synonyms. -->
		<fieldType name="text_general" class="solr.TextField"
			positionIncrementGap="100">
			<analyzer type="index">
				<tokenizer class="solr.NGramTokenizerFactory" minGramSize="1"
					maxGramSize="15" />
				<filter class="solr.StopFilterFactory" ignoreCase="true"
					words="stopwords.txt" />
				<!-- in this example, we will only use synonyms at query time <filter 
					class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" 
					expand="false"/> -->
				<filter class="solr.LowerCaseFilterFactory" />
			</analyzer>
			<analyzer type="query">
				<tokenizer class="solr.StandardTokenizerFactory" />
				<filter class="solr.StopFilterFactory" ignoreCase="true"
					words="stopwords.txt" />
				<filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt"
					ignoreCase="true" expand="true" />
				<filter class="solr.LowerCaseFilterFactory" />
			</analyzer>
		</fieldType>

		<!-- A text field with defaults appropriate for English: it tokenizes with 
			StandardTokenizer, removes English stop words (lang/stopwords_en.txt), down 
			cases, protects words from protwords.txt, and finally applies Porter's stemming. 
			The query time analyzer also applies synonyms from synonyms.txt. -->
		<fieldType name="text_en" class="solr.TextField"
			positionIncrementGap="100">
			<analyzer type="index">
				<tokenizer class="solr.StandardTokenizerFactory" />
				<!-- in this example, we will only use synonyms at query time <filter 
					class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" 
					expand="false"/> -->
				<!-- Case insensitive stop word removal. -->
				<filter class="solr.StopFilterFactory" ignoreCase="true"
					words="lang/stopwords_en.txt" />
				<filter class="solr.LowerCaseFilterFactory" />
				<filter class="solr.EnglishPossessiveFilterFactory" />
				<filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt" />
				<!-- Optionally you may want to use this less aggressive stemmer instead 
					of PorterStemFilterFactory: <filter class="solr.EnglishMinimalStemFilterFactory"/> -->
				<filter class="solr.PorterStemFilterFactory" />
			</analyzer>
			<analyzer type="query">
				<tokenizer class="solr.StandardTokenizerFactory" />
				<filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt"
					ignoreCase="true" expand="true" />
				<filter class="solr.StopFilterFactory" ignoreCase="true"
					words="lang/stopwords_en.txt" />
				<filter class="solr.LowerCaseFilterFactory" />
				<filter class="solr.EnglishPossessiveFilterFactory" />
				<filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt" />
				<!-- Optionally you may want to use this less aggressive stemmer instead 
					of PorterStemFilterFactory: <filter class="solr.EnglishMinimalStemFilterFactory"/> -->
				<filter class="solr.PorterStemFilterFactory" />
			</analyzer>
		</fieldType>

		<!-- A text field with defaults appropriate for English, plus aggressive 
			word-splitting and autophrase features enabled. This field is just like text_en, 
			except it adds WordDelimiterFilter to enable splitting and matching of words 
			on case-change, alpha numeric boundaries, and non-alphanumeric chars. This 
			means certain compound word cases will work, for example query "wi fi" will 
			match document "WiFi" or "wi-fi". -->
		<fieldType name="text_en_splitting" class="solr.TextField"
			positionIncrementGap="100" autoGeneratePhraseQueries="true">
			<analyzer type="index">
				<tokenizer class="solr.WhitespaceTokenizerFactory" />
				<!-- in this example, we will only use synonyms at query time <filter 
					class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" 
					expand="false"/> -->
				<!-- Case insensitive stop word removal. -->
				<filter class="solr.StopFilterFactory" ignoreCase="true"
					words="lang/stopwords_en.txt" />
				<filter class="solr.WordDelimiterFilterFactory"
					generateWordParts="1" generateNumberParts="1" catenateWords="1"
					catenateNumbers="1" catenateAll="0" splitOnCaseChange="1" />
				<filter class="solr.LowerCaseFilterFactory" />
				<filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt" />
				<filter class="solr.PorterStemFilterFactory" />
			</analyzer>
			<analyzer type="query">
				<tokenizer class="solr.WhitespaceTokenizerFactory" />
				<filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt"
					ignoreCase="true" expand="true" />
				<filter class="solr.StopFilterFactory" ignoreCase="true"
					words="lang/stopwords_en.txt" />
				<filter class="solr.WordDelimiterFilterFactory"
					generateWordParts="1" generateNumberParts="1" catenateWords="0"
					catenateNumbers="0" catenateAll="0" splitOnCaseChange="1" />
				<filter class="solr.LowerCaseFilterFactory" />
				<filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt" />
				<filter class="solr.PorterStemFilterFactory" />
			</analyzer>
		</fieldType>

		<!-- since fields of this type are by default not stored or indexed, any 
			data added to them will be ignored outright. -->
		<fieldtype name="ignored" stored="false" indexed="false"
			multiValued="true" class="solr.StrField" />
	</types>

	<!-- Similarity is the scoring routine for each document vs. a query. A 
		custom Similarity or SimilarityFactory may be specified here, but the default 
		is fine for most applications. For more info: http://wiki.apache.org/solr/SchemaXml#Similarity -->
	<!-- <similarity class="com.example.solr.CustomSimilarityFactory"> <str 
		name="paramkey">param value</str> </similarity> -->

</schema>
