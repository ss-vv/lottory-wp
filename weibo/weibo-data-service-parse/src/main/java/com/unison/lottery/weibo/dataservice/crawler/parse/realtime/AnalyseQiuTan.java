package com.unison.lottery.weibo.dataservice.crawler.parse.realtime;
import java.util.ArrayList;
import java.util.HashMap;


public class AnalyseQiuTan {
	
	public static void main(String[] args) {
		
//		String response = "15^韩K联^1!72^日联杯^1!215^欧青U19^1!116^捷克杯^1!114^欧青U21外^1!67^欧洲杯^1!4^巴西甲^1!1183^阿根廷杯^1$$1057413^15^20141009130000^蔚山现代^FC首尔^0^0^0^7^6!1061848^72^20141009180000^广岛三箭^柏太阳神^0^0^0^8^9!1061849^72^20141009180000^大阪钢巴^川崎前锋^0^0^0^2^4!1063853^215^20141009200000^芬兰U19^挪威U19^0^0^0^^!1063786^215^20141009210000^拉脫维亚U19^奧地利U19^0^0^0^^!1063803^215^20141009210000^北爱尔兰U19^捷克U19^0^0^0^^!1063833^215^20141009213000^波兰U19^摩尔多瓦U19^0^0^0^^!1063854^215^20141009230000^立陶宛U19^苏格兰U19^0^0^0^^!1059846^116^20141009235900^波希米亚1905^亚布洛内茨^0^0^0^6^3!1062767^114^20141010003000^荷兰U21^葡萄牙U21^0^0^0^^!974988^67^20141010024500^斯洛伐克^西班牙^0^0^0^40^8!974989^67^20141010024500^马其顿^卢森堡^0^0^0^112^127!974990^67^20141010024500^白俄罗斯^乌克兰^0^0^0^89^24!975056^67^20141010024500^立陶宛^爱沙尼亚^0^0^0^103^81!975057^67^20141010024500^英格兰^圣马力诺^0^0^0^18^208!975058^67^20141010024500^斯洛文尼亚^瑞士^0^0^0^53^10!975147^67^20141010024500^列支敦士登^黑山^0^0^0^172^43!975148^67^20141010024500^瑞典^俄罗斯^0^0^0^32^23!975149^67^20141010024500^摩尔多瓦^奧地利^0^0^0^105^39!974625^4^20141010063000^弗鲁米嫩塞^米内罗竞技^0^0^0^7^5!974627^4^20141010063000^桑托斯^巴伊亚^0^0^0^8^14!1063008^1183^20141010071000^河床^罗萨里奥中央^0^0^0^1^12!974633^4^20141010073000^沙佩科恩斯^巴西国际^0^0^0^15^2$$974625^1^4283093^0.25^0.82^1.00^0.25^0.82^1.00!974625^3^4281686^0.25^0.98^0.90^0.25^0.86^1.04!974625^8^4281811^0.25^0.975^0.875^0.25^0.825^1.025!974625^12^4282403^0.5^1.25^0.70^0.5^1.20^0.75!974625^14^4281833^0.25^0.99^0.91^0.25^0.88^1.03!974625^17^4281779^0.25^1.02^0.90^0.25^0.89^1.03!974625^22^4281854^0.25^0.89^0.96^0.25^0.83^1.02!974625^23^4281680^0.25^0.99^0.91^0.25^0.87^1.05!974625^24^4281769^0.25^1.02^0.90^0.25^0.89^1.03!974625^31^4281791^0.25^1.00^0.92^0.25^0.85^1.07!974625^35^4281691^0.25^0.99^0.90^0.25^0.87^1.04!974627^1^4283092^0.75^0.92^0.90^0.75^0.92^0.90!974627^3^4281678^0.75^0.98^0.90^0.75^0.95^0.94!974627^8^4281813^0.75^0.975^0.875^0.75^0.925^0.925!974627^12^4282410^0.5^0.75^1.20^0.5^0.75^1.20!974627^14^4281742^0.75^0.99^0.91^0.75^0.95^0.95!974627^17^4281778^0.75^1.01^0.91^0.75^0.96^0.96!974627^22^4281853^0.75^0.97^0.87^0.75^0.92^0.90!974627^23^4281677^0.75^0.99^0.91^0.75^0.96^0.96!974627^24^4281768^0.75^1.01^0.91^0.75^0.96^0.96!974627^31^4281790^0.75^1.02^0.90^0.75^0.98^0.94!974627^35^4281682^0.75^0.99^0.90^0.75^0.96^0.94!974633^1^4283094^-0.25^0.84^0.98^-0.25^0.84^0.98!974633^3^4281698^-0.25^0.90^0.98^-0.25^0.91^0.98!974633^8^4281814^-0.25^0.875^0.975^-0.25^0.90^0.95!974633^12^4282411^-0.25^0.90^1.05^-0.25^0.95^1.00!974633^14^4281793^-0.25^0.89^1.01^-0.25^0.90^1.00!974633^17^4281780^-0.25^0.92^1.00^-0.25^0.93^0.99!974633^22^4281855^-0.25^0.86^0.98^-0.25^0.87^0.96!974633^23^4281692^-0.25^0.91^0.99^-0.25^0.92^1.00!974633^24^4281770^-0.25^0.92^1.00^-0.25^0.93^0.99!974633^31^4281789^-0.25^0.88^1.04^-0.25^0.93^0.99!974633^35^4281697^-0.25^0.89^1.00^-0.25^0.92^0.98!974988^1^4281900^-1.25^0.84^0.98^-1.25^0.84^0.98!974988^3^4268858^-1^1.16^0.74^-1.25^0.87^1.03!974988^4^4268912^-1.25^0.79^0.95^-1.25^0.81^0.93!974988^8^4269102^-1^1.15^0.675^-1.25^0.875^1.05!974988^12^4275661^-1.25^0.93^1.02^-1.25^0.92^1.03!974988^14^4268973^-1.25^0.85^1.05^-1.25^0.87^1.05!974988^17^4268746^-1^1.25^0.70^-1.25^0.87^1.05!974988^22^4268179^-1^1.26^0.67^-1.25^0.84^1.00!974988^23^4268851^-1^1.13^0.78^-1.25^0.87^1.05!974988^24^4268766^-1^1.25^0.70^-1.25^0.87^1.05!974988^31^4268109^-1^1.20^0.73^-1.25^0.89^1.03!974988^35^4268863^-1^1.13^0.77^-1.25^0.88^1.03!974989^1^4281899^1^0.80^1.02^1.25^0.92^0.90!974989^3^4268854^1.25^1.08^0.80^1.25^0.98^0.92!974989^4^4274182^1.25^1.02^0.74^1.25^0.92^0.82!974989^8^4269107^1.25^1.075^0.725^1.25^1.00^0.925!974989^12^4275659^1^0.82^1.13^1.25^1.00^0.95!974989^14^4268974^1.25^1.09^0.84^1.25^0.99^0.93!974989^17^4268745^1.25^1.05^0.85^1.25^0.98^0.94!974989^22^4268098^1.25^0.92^0.92^1.25^0.94^0.90!974989^23^4268843^1.25^1.09^0.81^1.25^0.99^0.93!974989^24^4268765^1.25^1.05^0.85^1.25^0.98^0.94!974989^31^4268072^1.25^0.95^0.95^1.25^0.99^0.93!974989^35^4268852^1.25^1.09^0.80^1.25^0.99^0.92!974990^1^4281898^-0.25^0.80^1.02^-0.25^0.92^0.90!974990^3^4268844^-0.25^0.85^1.03^-0.25^0.98^0.92!974990^4^4268910^-0.25^0.73^1.04^-0.25^0.85^0.89!974990^8^4269105^-0.25^0.775^1.025^-0.25^1.00^0.925!974990^12^4275657^-0.25^0.87^1.08^-0.5^0.70^1.25!974990^14^4268971^-0.25^0.84^1.09^-0.25^0.99^0.93!974990^17^4268720^-0.25^0.82^1.08^-0.25^0.99^0.93!974990^22^4268097^-0.25^0.88^0.96^-0.25^0.93^0.90!974990^23^4268841^-0.25^0.86^1.04^-0.25^0.99^0.93!974990^24^4268725^-0.25^0.82^1.08^-0.25^0.99^0.93!974990^31^4268046^-0.25^0.92^0.98^-0.25^1.02^0.90!974990^35^4268846^-0.25^0.86^1.03^-0.25^0.99^0.92!975056^1^4281901^0.25^0.86^0.96^0.25^0.86^0.96!975056^3^4268870^0.25^0.90^0.98^0.25^0.88^1.02!975056^4^4268911^0.25^0.93^0.82^0.25^0.86^0.88!975056^8^4269106^0.25^0.85^0.95^0.25^0.90^1.025!975056^12^4275658^0.5^1.22^0.73^0.5^1.25^0.70!975056^14^4268976^0.25^0.91^1.00^0.25^0.89^1.02!975056^17^4268747^0.25^0.90^1.00^0.25^0.89^1.03!975056^22^4268178^0.25^0.86^0.99^0.25^0.86^0.98!975056^23^4268862^0.25^0.91^0.99^0.25^0.89^1.03!975056^24^4268767^0.25^0.90^1.00^0.25^0.89^1.03!975056^31^4268091^0.25^0.88^1.02^0.25^0.90^1.02!975056^35^4268867^0.25^0.91^0.98^0.25^0.89^1.02!975057^4^4278862^6.25^0.93^0.81^6.25^0.94^0.80!975057^22^4283584^6.25^0.95^0.89^6.25^0.95^0.89!975058^1^4281902^-0.25^0.72^1.10^-0.25^0.82^1.00!975058^3^4268886^-0.25^0.80^1.08^-0.25^0.88^1.02!975058^4^4268925^0^1.02^0.74^-0.25^0.77^0.97!975058^8^4269103^-0.25^0.75^1.05^-0.25^0.90^1.025!975058^12^4275662^-0.25^0.82^1.13^-0.25^0.92^1.03!975058^14^4268975^-0.25^0.81^1.12^-0.25^0.88^1.04!975058^17^4268748^-0.25^0.80^1.11^-0.25^0.90^1.02!975058^22^4268177^-0.25^0.84^1.00^-0.25^0.88^0.95!975058^23^4268866^-0.25^0.81^1.09^-0.25^0.89^1.03!975058^24^4268768^-0.25^0.80^1.11^-0.25^0.90^1.02!975058^31^4268108^-0.25^0.87^1.03^-0.25^0.90^1.02!975058^35^4268884^-0.25^0.81^1.08^-0.25^0.89^1.02!975147^4^4275558^-1.75^0.88^0.85^-1.75^0.93^0.81!975147^22^4283756^-1.75^1.09^0.74^-1.75^1.09^0.74!975148^1^4281904^0.25^1.08^0.74^0^0.86^0.96!975148^3^4268889^0.25^1.12^0.77^0^0.89^1.01!975148^4^4268927^0^0.78^0.97^0^0.81^0.94!975148^8^4269104^0.25^1.10^0.70^0^0.925^1.00!975148^12^4275663^0^0.85^1.10^0^0.80^1.15!975148^14^4268972^0.25^1.15^0.79^0^0.91^1.00!975148^17^4268749^0.25^1.13^0.78^0^0.92^1.00!975148^22^4268213^0.25^1.13^0.74^0^0.89^0.95!975148^23^4268887^0.25^1.13^0.78^0^0.90^1.02!975148^24^4268769^0.25^1.13^0.78^0^0.92^1.00!975148^31^4268139^0.25^1.16^0.76^0^0.92^1.00!975148^35^4268891^0.25^1.13^0.77^0^0.90^1.01!975149^1^4281903^-0.75^0.86^0.96^-0.75^0.96^0.86!975149^3^4268888^-0.75^0.88^1.00^-0.75^1.00^0.90!975149^4^4268926^-0.75^0.89^0.85^-0.75^0.90^0.84!975149^8^4269101^-0.75^0.875^0.925^-0.75^1.025^0.90!975149^12^4275660^-0.5^1.20^0.75^-0.5^1.20^0.75!975149^14^4268977^-0.75^0.92^0.99^-0.75^1.00^0.91!975149^17^4268877^-0.75^0.94^0.96^-0.75^1.00^0.92!975149^22^4268214^-0.75^0.96^0.88^-0.75^0.99^0.85!975149^23^4268883^-0.75^0.89^1.01^-0.75^1.02^0.90!975149^24^4268878^-0.75^0.94^0.96^-0.75^1.00^0.92!975149^31^4268090^-0.75^0.98^0.92^-0.75^1.03^0.89!975149^35^4268890^-0.75^0.89^1.00^-0.75^1.01^0.90!1057413^1^4285072^0.25^0.82^0.94^0.25^0.82^0.94!1057413^3^4282034^0.25^0.88^1.00^0.25^0.94^0.96!1057413^8^4282520^0.25^0.875^0.975^0.25^0.925^0.925!1057413^12^4282742^0.25^0.93^1.02^0.25^0.93^1.02!1057413^14^4282177^0.25^0.90^0.99^0.25^0.91^0.97!1057413^17^4282159^0.25^0.90^1.02^0.25^0.99^0.93!1057413^22^4282133^0.25^0.88^0.96^0.25^0.91^0.92!1057413^23^4282027^0.25^0.89^1.01^0.25^0.96^0.96!1057413^24^4282139^0.25^0.90^1.02^0.25^0.99^0.93!1057413^31^4282083^0.25^0.92^1.00^0.25^0.94^0.98!1057413^35^4282043^0.25^0.89^1.00^0.25^0.95^0.96!1059846^3^4283241^-0.25^0.88^0.98^-0.25^0.90^0.98!1059846^8^4283604^-0.25^0.875^0.925^-0.25^0.875^0.925!1059846^12^4284289^-0.25^0.97^0.98^-0.25^0.97^0.98!1059846^17^4283374^-0.25^0.95^0.95^-0.25^0.95^0.95!1059846^22^4283479^-0.25^0.90^0.90^-0.25^0.90^0.90!1059846^23^4283234^-0.25^0.89^0.99^-0.25^0.91^0.99!1059846^24^4283380^-0.25^0.95^0.95^-0.25^0.95^0.95!1059846^31^4284325^-0.25^0.95^0.95^-0.25^0.95^0.95!1059846^35^4283245^-0.25^0.89^0.98^-0.25^0.91^0.98!1061848^1^4285074^0.25^0.92^0.92^0.25^0.92^0.92!1061848^3^4283488^0.5^1.12^0.77^0.25^1.08^0.81!1061848^8^4283899^0.25^0.875^0.975^0.25^0.95^0.90!1061848^12^4283853^0.25^0.93^1.02^0.5^1.28^0.67!1061848^14^4283651^0.25^0.97^0.94^0.25^0.97^0.93!1061848^17^4283724^0.25^0.92^1.00^0.25^1.02^0.90!1061848^22^4283665^0.25^0.86^0.98^0.25^0.96^0.89!1061848^23^4283480^0.5^1.13^0.78^0.25^1.00^0.92!1061848^24^4283731^0.25^0.92^1.00^0.25^0.99^0.93!1061848^31^4283571^0.25^0.90^1.02^0.25^0.98^0.94!1061848^35^4283498^0.5^1.13^0.77^0.25^1.00^0.90!1061849^1^4285077^0.5^0.90^0.94^0.5^0.84^1.00!1061849^3^4283523^0.5^0.80^1.08^0.5^0.85^1.05!1061849^8^4283898^0.5^0.875^0.975^0.5^0.825^1.025!1061849^12^4283852^0.5^0.87^1.08^0.5^0.87^1.08!1061849^14^4283652^0.5^0.85^1.07^0.5^0.86^1.05!1061849^17^4283723^0.5^0.86^1.06^0.5^0.86^1.06!1061849^22^4283666^0.5^0.80^1.05^0.5^0.83^1.02!1061849^23^4283504^0.5^0.81^1.09^0.5^0.85^1.07!1061849^24^4283730^0.5^0.86^1.06^0.5^0.86^1.06!1061849^31^4283570^0.5^0.84^1.08^0.5^0.85^1.07!1061849^35^4283531^0.5^0.81^1.08^0.5^0.86^1.05!1062767^1^4281897^0^0.74^1.08^0^0.64^1.18!1062767^3^4280436^0^0.90^0.98^0.25^0.98^0.92!1062767^8^4280767^0^0.775^1.10^0.25^0.95^0.90!1062767^12^4281340^0^0.80^1.15^0.25^0.97^0.98!1062767^17^4280561^0^0.85^1.07^0.25^0.98^0.94!1062767^22^4280150^0^0.94^0.86^0.25^0.90^0.89!1062767^23^4280420^0^0.92^1.00^0.25^0.98^0.94!1062767^24^4280568^0^0.85^1.07^0.25^0.98^0.94!1062767^31^4279939^0^1.00^0.92^0.25^0.96^0.96!1062767^35^4280438^0^0.91^0.98^0.25^0.99^0.92!1063008^1^4285078^0.5^1.06^0.70^0.5^1.06^0.70!1063008^3^4283451^0.75^0.96^0.90^0.5^1.16^0.74!1063008^8^4283613^0.75^1.10^0.70^0.5^1.15^0.675!1063008^14^4283497^0.75^1.04^0.84^0.25^0.85^1.03!1063008^17^4283453^0.75^1.07^0.83^0.25^0.86^1.04!1063008^22^4283502^0.75^1.05^0.76^0.25^0.79^0.97!1063008^23^4283445^0.75^0.97^0.91^0.5^1.21^0.72!1063008^24^4283482^0.75^1.07^0.83^0.25^0.86^1.04!1063008^31^4283307^0.75^1.05^0.85^0.5^1.20^0.73!1063008^35^4283455^0.75^0.97^0.90^0.5^1.17^0.74!1063786^8^4285732^-0.5^0.95^0.85^-0.5^1.425^0.525!1063786^12^4285997^-0.5^1.40^0.55^-0.5^1.40^0.55!1063786^14^4285969^-1^0.94^0.89^-1^0.95^0.88!1063786^17^4285817^-0.5^1.08^0.68^-0.5^1.40^0.51!1063786^22^4285715^-0.5^0.94^0.86^-0.5^1.41^0.54!1063786^24^4285868^-0.5^1.08^0.68^-0.5^1.40^0.51!1063786^31^4285714^-0.5^0.92^0.84^-0.5^1.36^0.53!1063803^8^4285731^-0.5^0.875^0.925^-0.5^0.80^1.00!1063803^12^4285994^-0.5^0.78^1.12^-0.5^0.78^1.12!1063803^14^4285970^-0.25^0.96^0.87^-0.5^0.88^0.95!1063803^17^4285818^-0.5^0.83^0.93^-0.5^0.87^0.93!1063803^22^4285734^-0.5^0.86^0.94^-0.5^0.80^1.00!1063803^24^4285809^-0.5^0.83^0.93^-0.5^0.87^0.93!1063803^31^4285717^-0.5^0.85^0.91^-0.5^0.73^1.07!1063833^8^4285736^1.25^0.725^1.075^1.25^0.65^1.20!1063833^12^4285973^1.25^0.68^1.22^1.25^0.68^1.22!1063833^14^4285971^1.5^0.87^0.96^1.5^0.87^0.96!1063833^17^4285819^1.25^0.69^1.07^1.25^0.64^1.19!1063833^22^4285737^1.25^0.75^1.08^1.25^0.67^1.20!1063833^24^4285810^1.25^0.69^1.07^1.25^0.64^1.19!1063833^31^4285733^1.25^0.71^1.05^1.25^0.65^1.17!1063853^8^4285730^-0.25^1.025^0.775^-0.25^1.35^0.575!1063853^14^4285968^-0.5^1.04^0.80^-0.5^1.04^0.81!1063853^17^4285876^-0.25^1.14^0.63^-0.25^1.33^0.55!1063853^22^4285716^-0.25^1.03^0.78^-0.25^1.33^0.57!1063853^24^4285875^-0.25^1.14^0.63^-0.25^1.33^0.55!1063853^31^4285713^-0.25^1.00^0.76^-0.25^1.29^0.57!1063854^8^4285738^-0.75^1.025^0.775^-0.75^1.05^0.75!1063854^12^4285974^-0.75^1.05^0.85^-0.75^1.05^0.85!1063854^14^4285972^-1^0.85^0.98^-1^0.86^0.97!1063854^17^4285820^-0.75^1.02^0.74^-0.75^1.12^0.69!1063854^22^4285739^-0.75^1.03^0.78^-0.75^1.07^0.75!1063854^24^4285811^-0.75^1.02^0.74^-0.75^1.12^0.69!1063854^31^4285735^-0.75^1.00^0.76^-0.75^1.00^0.80";
		String response2 = "欧洲杯^67^1!美职业^21^1!巴西甲^4^1!欧青U21外^114^1!欧青U19^215^1!韩K联^15^1!捷克杯^116^1!日联杯^72^1!亚青U19^399^1!阿根廷杯^1183^1$$1064568^399^0^20141009170000^^伊朗U19(中)^泰国U19^0^0^^^0^0^0^0^1.25^^^0^^^^^0!1064580^399^0^20141009170000^^韩国U19(中)^越南U19^0^0^^^0^0^0^0^1^^^0^^^^^0!1063785^215^0^20141009180000^^德国U19(中)^哈萨克斯坦U19^0^0^^^0^0^0^0^4.5^^^0^^^^^0!1061848^72^0^20141009180000^^广岛三箭^柏太阳神^0^0^^^0^0^0^0^0.5^^^0^8^9^^^0!1061849^72^0^20141009180000^^大阪钢巴^川崎前锋^0^0^^^0^0^0^0^0.5^^^0^2^4^^^1!1063793^215^0^20141009200000^^爱沙尼亚U19(中)^土耳其U19^0^0^^^0^0^0^0^-1.5^^^0^^^^^0!1063853^215^0^20141009200000^^芬兰U19(中)^挪威U19^0^0^^^0^0^0^0^-0.5^^^0^^^^^0!1064581^399^0^20141009200000^^日本U19(中)^中国U19^0^0^^^0^0^0^0^1.25^^^0^^^^^1!1064569^399^0^20141009200000^^缅甸U19^也门U19^0^0^^^0^0^0^0^1.25^^^0^^^^^0!1063803^215^0^20141009210000^^北爱尔兰U19^捷克U19^0^0^^^0^0^0^0^-0.5^^^0^^^^^0!1063786^215^0^20141009210000^^拉脫维亚U19^奧地利U19^0^0^^^0^0^0^0^-0.75^^^0^^^^^0!1063833^215^0^20141009213000^^波兰U19^摩尔多瓦U19^0^0^^^0^0^0^0^1.25^^^0^^^^^0!1063834^215^0^20141009213000^^荷兰U19(中)^安道尔U19^0^0^^^0^0^0^0^6.25^^^0^^^^^0!1063794^215^0^20141009220000^^克罗地亚U19^冰岛U19^0^0^^^0^0^0^0^2^^^0^^^^^0!1063854^215^0^20141009230000^^立陶宛U19^苏格兰U19^0^0^^^0^0^0^0^-0.75^^^0^^^^^0!1059846^116^0^20141009235900^^波希米亚1905^亚布洛内茨^0^0^^^0^0^0^0^-0.25^^^0^6^3^^^0!1062767^114^0^20141010003000^^荷兰U21(中)^葡萄牙U21^0^0^^^0^0^0^0^0^^^0^^^^^0!1063804^215^0^20141010020000^^俄罗斯U19(中)^法罗群岛U19^0^0^^^0^0^0^0^4.5^^^0^^^^^0!974988^67^0^20141010024500^^斯洛伐克^西班牙^0^0^^^0^0^0^0^-1^^^0^40^8^^^1!974989^67^0^20141010024500^^马其顿^卢森堡^0^0^^^0^0^0^0^1.25^^^0^112^127^^^0!974990^67^0^20141010024500^^白俄罗斯^乌克兰^0^0^^^0^0^0^0^-0.25^^^0^89^24^^^0!975056^67^0^20141010024500^^立陶宛^爱沙尼亚^0^0^^^0^0^0^0^0.25^^^0^103^81^^^0!975057^67^0^20141010024500^^英格兰^圣马力诺^0^0^^^0^0^0^0^^^^0^18^208^^^1!975058^67^0^20141010024500^^斯洛文尼亚^瑞士^0^0^^^0^0^0^0^-0.25^^^0^53^10^^^0!975147^67^0^20141010024500^^列支敦士登^黑山^0^0^^^0^0^0^0^^^^0^172^43^^^0!975148^67^0^20141010024500^^瑞典^俄罗斯^0^0^^^0^0^0^0^0.25^^^0^32^23^^^0!975149^67^0^20141010024500^^摩尔多瓦^奧地利^0^0^^^0^0^0^0^-0.75^^^0^105^39^^^0!974625^4^0^20141010063000^^弗鲁米嫩塞^米内罗竞技^0^0^^^0^0^0^0^0.25^^^0^7^5^^^0!974627^4^0^20141010063000^^桑托斯^巴伊亚^0^0^^^0^0^0^0^0.75^^^0^8^15^^^0!1063008^1183^0^20141010071000^^河床(中)^罗萨里奥中央^0^0^^^0^0^0^0^0.75^^^0^1^12^^^0!974633^4^0^20141010073000^^沙佩科恩斯^巴西国际^0^0^^^0^0^0^0^-0.25^^^0^17^3^^^0!974630^4^-1^20141009080000^20141009090844^维多利亚^戈伊亚斯^2^2^2^0^0^0^1^1^0.25^^^0^17^10^^^0!974631^4^-1^20141009090000^20141009100427^格雷米奥^累西腓体育^2^0^1^0^0^0^3^1^1^^^0^6^9^^^0!974632^4^-1^20141009090000^20141009100654^费古埃伦斯^弗拉门戈^1^2^0^1^0^0^5^2^0.25^^^0^11^13^^^0!974629^4^-1^20141009090000^20141009100454^克鲁塞罗^科林蒂安^0^1^0^0^0^0^1^2^0.75^^^0^1^4^^^0!942905^21^-1^20141009103500^20141009114125^波特兰伐木者^圣何塞地震^3^0^1^0^0^0^2^1^0.75^^^1^11^17^^^0!1057413^15^-1^20141009130000^20141009140407^蔚山现代^FC首尔^0^3^0^1^1^0^0^0^0.25^^^0^7^6^^^0";
		String response3 = "1^1^3^埃德诺!1^1^42^埃德诺!0^1^74^埃里克!0^1^75^布鲁诺.米内罗$$3^11^6!4^5^2!5^25^15!6^4^3!9^1^2!11^2^1!14^45%^55%!16^0^3";
		String responseFXzq = "总^11^4^3^4^17^18^15^10^36%^0!主^5^1^2^2^9^10^5^13^20%!客^6^3^1^2^8^8^10^6^50%!近^6^2^2^2^11^13^8^^33%$$总^11^5^2^4^11^15^17^8^45%^0!主^4^1^0^3^2^10^3^17^25%!客^7^4^2^1^9^5^14^4^57%!近^6^3^1^2^7^7^10^^50%$$$$20140325031500^德北^梅彭^圣保利业余队^0^4^0^2^2617^10945^L^0.5!20130928200000^德北^圣保利业余队^梅彭^0^3^0^1^10945^2617^W^0!20130324220000^德北^梅彭^圣保利业余队^1^2^1^1^2617^10945^L^0.5!20121031020000^德北^圣保利业余队^梅彭^0^4^0^3^10945^2617^W^0.25!20120512193000^德北^圣保利业余队^梅彭^2^3^1^2^10945^2617^W^0.25!20111203210000^德北^梅彭^圣保利业余队^1^0^0^0^2617^10945^W^0.25$$20141003230000^德北^雷登^梅彭^1^1^赢^14810^2617^0^0^0.25!20140927010000^德北^梅彭^布伦斯维克青年队^3^3^输^2617^13787^2^2^0.25!20140920013000^德北^克洛蓬堡^梅彭^4^0^输^4451^2617^3^0^-0.5!20140913014500^德北^梅彭^云达不莱梅业余队^1^3^输^2617^1090^0^0^0!20140907210000^德北^吕内堡^梅彭^1^3^赢^8480^2617^1^2^-0.5!20140830210000^德北^梅彭^沃尔夫斯堡青年队^3^1^赢^2617^1122^2^1^-0.25!20140824200000^德北^弗伦斯堡^梅彭^0^1^赢^10662^2617^0^1^0.25!20140817210000^德北^梅彭^奧登堡格^1^2^输^2617^5079^0^1^0.5!20140810200000^德北^诺德施泰特^梅彭^2^1^输^13658^2617^1^0^-0.25!20140802013000^德北^梅彭^高斯拉尔^1^1^输^2617^10946^1^1^0.5$$20141004190000^德北^汉堡青年队^圣保利业余队^2^1^输^1115^10945^2^0^0.75!20140928200000^德北^新曼斯特^圣保利业余队^1^2^赢^1728^10945^1^0^-0.25!20140920200000^德北^圣保利业余队^汉诺威96青年队^1^0^赢^10945^2785^0^0^-0.25!20140914210000^德北^FT布伦瑞克^圣保利业余队^0^2^赢^13786^10945^0^1^-0.25!20140906220000^德北^雷登^圣保利业余队^1^1^赢^14810^10945^0^1^0.25!20140831200000^德北^圣保利业余队^布伦斯维克青年队^0^3^输^10945^13787^0^1^0!20140824200000^德北^克洛蓬堡^圣保利业余队^1^2^赢^4451^10945^0^2^0!20140817200000^德北^圣保利业余队^云达不莱梅业余队^1^5^输^10945^1090^0^2^-0.5!20140810210000^德北^吕内堡^圣保利业余队^0^1^赢^8480^10945^0^0^-0.25!20140803200000^德北^圣保利业余队^沃尔夫斯堡青年队^0^2^输^10945^1122^0^1^-0.75$$20141018190000^德北^汉诺威96青年队^梅彭^4^2785^2617!20141026200000^德北^梅彭^新曼斯特^12^2617^1728!20141102200000^德北^汉堡青年队^梅彭^19^1115^2617$$20141018200000^德北^圣保利业余队^哈韦尔斯^4^10945^6072!20141026200000^德北^卢比克^圣保利业余队^12^1114^10945!20141102200000^德北^圣保利业余队^高斯拉尔^19^10945^10946$$$$2617^10945$$5^0^6^45.5%^7^63.6%^4^36.4%!1^0^4^20.0%^4^80.0%^1^20.0%!4^0^2^66.7%^3^50.0%^3^50.0%!赢^输^输^输^赢^赢^小^大^大^大^大^大^$$7^0^4^63.6%^5^45.5%^6^54.5%!1^0^3^25.0%^2^50.0%^2^50.0%!6^0^1^85.7%^3^42.9%^4^57.1%!输^赢^赢^赢^赢^输^大^大^小^小^小^大^$$德北^20140927010000^梅彭^2617^0.25^布伦斯维克青年队^13787^3^3^输!德北^20140810200000^梅彭^2617^0.25^诺德施泰特^13658^1^2^输!球会友谊^20140720210000^梅彭^2617^0.25^沙尔克04青年队^1723^2^2^输!德北^20140510010000^梅彭^2617^0.25^布伦斯维克青年队^13787^3^0^赢!德北^20140315210000^梅彭^2617^0.25^汉堡青年队^1115^1^0^赢!德北^20140301023000^梅彭^2617^0.25^威廉港^4461^2^1^赢$$德北^20140906220000^雷登^14810^0.25^圣保利业余队^10945^1^1^赢!德北^20140426200000^弗伦斯堡^10662^0.25^圣保利业余队^10945^1^1^赢!德北^20140404013000^布伦斯维克青年队^13787^0.25^圣保利业余队^10945^2^2^赢!德北^20140215200000^汉堡青年队^1115^0.25^圣保利业余队^10945^0^2^赢!德北^20131026200000^弗伦斯堡^10662^0.25^圣保利业余队^10945^1^0^输!德北^20131006210000^艾谢德^21634^0.25^圣保利业余队^10945^3^1^输$$^^$$";
		new AnalyseQiuTan().jc(responseFXzq,responseFXzq);
	}
	
	private void jc(String s1,String response)
    {
        HashMap hashmap;
        String db_company_str;
        float f1;
        ArrayList arraylist;
        String as1[];
        ArrayList arraylist1;
        int i1;
        float f2;
        float f3;
        float f4;
        float f5;
        float f6;
        float f7;
        float f8;
        int j1;
        float f9;
        float f10;
        float f11;
        float f12;
        float f13;
        float f14;
        float f15;
        float f16;
        float f17;
        float f18;
        String s2 = response;
        hashmap = new HashMap();
        if(s2 != null && s2.length() > 0)
        {
            String as3[] = s2.split("\\!", -1);
            int j2 = 0;
            while(j2 < as3.length) 
            {
                String as4[] = as3[j2].split("\\^", -1);
                if(as4.length >= 5)
                {
                    String s12;
                    if(as4[3].equals("1"))
                        s12 = "1";
                    else
                    if(as4[4].equals("1"))
                        s12 = "2";
                    else
                        s12 = "0";
                    hashmap.put(as4[0], s12);
                }
                j2++;
            }
        }
        db_company_str = "";//数据库中 ScoreApplication.a(this, "Key_FenXi_OP_Company", "");
        f1 = 0.0F;
        arraylist = new ArrayList();
        as1 = s1.split("\\!", -1);
        arraylist1 = new ArrayList();
        i1 = 0;
        f2 = 0.0F;
        f3 = 0.0F;
        f4 = 0.0F;
        f5 = 0.0F;
        f6 = 0.0F;
        f7 = 0.0F;
        f8 = 0.0F;
        j1 = 0;
        f9 = 0.0F;
        f10 = 0.0F;
        f11 = 0.0F;
        f12 = 0.0F;
        f13 = 0.0F;
        f14 = 0.0F;
        f15 = 0.0F;
        f16 = 0.0F;
        f17 = 0.0F;
        f18 = 0.0F;
//_L3:
        int k1 = as1.length;
        while(j1 < k1){
        	
        	String as2[] = as1[j1].split("\\^", -1);
            int i2;
            float f39;
            float f40;
            float f41;
            float f42;
            float f43;
            float f44;
            float f45;
            float f46;
            float f47;
            float f48;
            float f49;
            float f50;
            float f51;
            float f52;
            float f53;
            float f54;
            float f55;
            float f56;
            if(as2.length < 9)
            {
                i2 = i1;
                f39 = f2;
                f40 = f3;
                f41 = f4;
                f42 = f5;
                f43 = f6;
                f55 = f17;
                f44 = f18;
                f54 = f11;
                f45 = f12;
                f53 = f9;
                f46 = f10;
                f52 = f16;
                f47 = f15;
                f51 = f8;
                f48 = f7;
                float f58 = f13;
                f50 = f14;
                f49 = f58;
            } else
            if(!db_company_str.equals("") && !(new StringBuilder()).append(",").append(db_company_str).append(",").toString().contains((new StringBuilder()).append(",").append(as2[8]).append(",").toString()))
            {
                i2 = i1;
                f39 = f2;
                f40 = f3;
                f41 = f4;
                f42 = f5;
                f43 = f6;
                f55 = f17;
                f44 = f18;
                f54 = f11;
                f45 = f12;
                f53 = f9;
                f46 = f10;
                f52 = f16;
                f47 = f15;
                f51 = f8;
                f48 = f7;
                float f57 = f13;
                f50 = f14;
                f49 = f57;
            } else
            {
                int l1 = i1 + 1;
                float f19 = stringParseFloat(as2[2]);
                float f20 = stringParseFloat(as2[3]);
                float f21 = stringParseFloat(as2[4]);
                float f22 = stringParseFloat(as2[5]);
                float f23 = stringParseFloat(as2[6]);
                float f24 = stringParseFloat(as2[7]);
//                com.bet007.mobile.score.activity.fenxi.x x1;
                float f25;
                float f26;
                float f27;
                float f28;
                float f29;
                float f30;
                float f31;
                float f32;
                float f33;
                float f34;
                float f35;
                float f36;
                float f37;
                float f38;
                String s4;
                String s5;
                String s6;
                String s7;
                String s8;
                String s9;
                String s10;
                String s11;
                boolean flag;
                boolean flag1;
                if(f17 < f19)
                    f25 = f19;
                else
                    f25 = f17;
                if(f11 < f20)
                    f26 = f20;
                else
                    f26 = f11;
                if(f9 < f21)
                    f27 = f21;
                else
                    f27 = f9;
                if(l1 == 1 || f1 > f19)
                    f28 = f19;
                else
                    f28 = f1;
                if(l1 == 1 || f13 > f20)
                    f29 = f20;
                else
                    f29 = f13;
                if(l1 == 1 || f7 > f21)
                    f7 = f21;
                if(f16 < f22)
                    f30 = f22;
                else
                    f30 = f16;
                if(f8 < f23)
                    f31 = f23;
                else
                    f31 = f8;
                if(f14 < f24)
                    f32 = f24;
                else
                    f32 = f14;
                if(l1 == 1 || f15 > f22)
                    f15 = f22;
                if(l1 == 1 || f10 > f23)
                    f10 = f23;
                if(l1 == 1 || f12 > f24)
                    f12 = f24;
                f33 = f18 + f19;
                f34 = f6 + f20;
                f35 = f5 + f21;
                f36 = f4 + f22;
                f37 = f3 + f23;
                f38 = f2 + f24;
                s4 = as2[0];
                s5 = as2[1];
                s6 = as2[2];
                s7 = as2[3];
                s8 = as2[4];
                s9 = as2[5];
                s10 = as2[6];
                s11 = as2[7];
                if(hashmap.get(as2[8]) != null && ((String)hashmap.get(as2[8])).equals("1"))
                    flag = true;
                else
                    flag = false;
                if(hashmap.get(as2[8]) != null && ((String)hashmap.get(as2[8])).equals("2"))
                    flag1 = true;
                else
                    flag1 = false;
                System.out.println("添加第"+j1+"个");
                arraylist.add(new ModelZ(false, s4, s5, "", "", "", s6, s7, s8, s9, s10, s11, flag, flag1));
                arraylist1.add(new ModelE(as2[1], as2[0]));
                i2 = l1;
                f39 = f38;
                f40 = f37;
                f41 = f36;
                f42 = f35;
                f43 = f34;
                f44 = f33;
                f45 = f12;
                f46 = f10;
                f47 = f15;
                f48 = f7;
                f49 = f29;
                f1 = f28;
                f50 = f32;
                f51 = f31;
                f52 = f30;
                f53 = f27;
                f54 = f26;
                f55 = f25;
            }
            j1++;
            i1 = i2;
            f2 = f39;
            f3 = f40;
            f4 = f41;
            f5 = f42;
            f7 = f48;
            f8 = f51;
            f15 = f47;
            f16 = f52;
            f10 = f46;
            f9 = f53;
            f12 = f45;
            f11 = f54;
            f18 = f44;
            f17 = f55;
            f6 = f43;
            f56 = f50;
            f13 = f49;
            f14 = f56;
        
            
        }
        
        if(arraylist.size() == 0){
        	System.out.println("添加第"+j1+"个");
        	arraylist.add(new ModelZ(true));            	
        }else{
        	System.out.println("添加第"+j1+"个");
            arraylist.add(0, new ModelZ(true, "", "", "", "", "", formatFloat(Float.valueOf(f17)), 
            		formatFloat(Float.valueOf(f11)), formatFloat(Float.valueOf(f9)), formatFloat(Float.valueOf(f16)),
            		formatFloat(Float.valueOf(f8)), formatFloat(Float.valueOf(f14)), formatFloat(Float.valueOf(f1)), 
            		formatFloat(Float.valueOf(f13)), formatFloat(Float.valueOf(f7)), formatFloat(Float.valueOf(f15)), 
            		formatFloat(Float.valueOf(f10)), formatFloat(Float.valueOf(f12)), 
            		formatFloat(Double.valueOf((double)Math.round(100F * (f18 / (float)i1)) / 100D)), 
            		formatFloat(Double.valueOf((double)Math.round(100F * (f6 / (float)i1)) / 100D)), 
            		formatFloat(Double.valueOf((double)Math.round(100F * (f5 / (float)i1)) / 100D)), 
            		formatFloat(Double.valueOf((double)Math.round(100F * (f4 / (float)i1)) / 100D)), 
            		formatFloat(Double.valueOf((double)Math.round(100F * (f3 / (float)i1)) / 100D)), 
            		formatFloat(Double.valueOf((double)Math.round(100F * (f2 / (float)i1)) / 100D))));
        }
        
//        x1 = new com.bet007.mobile.score.activity.fenxi.x(arraylist, this, this);
//        E.setAdapter(x1);
//        Q.b(arraylist1);
//        Q.a(3);
        System.out.println("结束"+arraylist.size()+"arrayList1"+arraylist1.size());
        return;
    }
	
	
	public static float stringParseFloat(String paramString){
		float f1 = 0.0F;
	    try
	    {
	      float f2 = Float.parseFloat(paramString.trim());
	      f1 = f2;
	      
	    }
	    catch (Exception localException)
	    {
	      
	        
	    }
	    return f1;
	  }
	
	
	public static String formatFloat(float paramFloat)
	  {
	    String str = paramFloat + "";
	    if (str.indexOf(".") > 0)
	      str = str.replaceAll("0+?$", "").replaceAll("[.]$", "");
	    return str;
	  }
	
	public static String formatFloat(Object paramObject)
	  {
	    String s = paramObject.toString();
        try
        {
            Double.parseDouble(s.trim());
        }
        catch(Exception exception)
        {
            s = "";
        }
        if(s.indexOf(".") != -1)
        {
            if(s.length() - s.indexOf(".") == 2)
                s = (new StringBuilder()).append(s).append("0").toString();
        } else
        {
            s = (new StringBuilder()).append(s).append(".00").toString();
        }
        return s;
    }
  
}



class ax
{
  boolean aA;

  public ax()
  {
  }

  public ax(boolean paramBoolean)
  {
    this.aA = paramBoolean;
  }

  public boolean aA()
  {
    return this.aA;
  }
}


class ModelZ extends ax
{
  boolean a;
  String b;
  String c;
  String d;
  String e;
  String f;
  String g;
  String h;
  String i;
  String j;
  String k;
  String l;
  String m;
  String n;
  String o;
  String p;
  String q;
  String r;
  String s;
  String t;
  String u;
  String v;
  String w;
  String x;
  boolean y;
  boolean z;

  public ModelZ(boolean paramBoolean)
  {
    super(paramBoolean);
  }

  public ModelZ(boolean paramBoolean, String paramString1, String paramString2, String paramString3, String paramString4, String paramString5, String paramString6, String paramString7, String paramString8, String paramString9, String paramString10, String paramString11, String paramString12, String paramString13, String paramString14, String paramString15, String paramString16, String paramString17, String paramString18, String paramString19, String paramString20, String paramString21, String paramString22, String paramString23)
  {
    this.a = paramBoolean;
    this.b = paramString1;
    this.c = paramString2;
    this.d = paramString3;
    this.e = paramString4;
    this.f = paramString5;
    this.g = paramString6;
    this.h = paramString7;
    this.i = paramString8;
    this.j = paramString9;
    this.k = paramString10;
    this.l = paramString11;
    this.m = paramString12;
    this.n = paramString13;
    this.o = paramString14;
    this.p = paramString15;
    this.q = paramString16;
    this.r = paramString17;
    this.s = paramString18;
    this.t = paramString19;
    this.u = paramString20;
    this.v = paramString21;
    this.w = paramString22;
    this.x = paramString23;
  }

  public ModelZ(boolean paramBoolean1, String paramString1, String paramString2, String paramString3, String paramString4, String paramString5, String paramString6, String paramString7, String paramString8, String paramString9, String paramString10, String paramString11, boolean paramBoolean2, boolean paramBoolean3)
  {
    this.a = paramBoolean1;
    this.b = paramString1;
    this.c = paramString2;
    this.d = paramString3;
    this.e = paramString4;
    this.f = paramString5;
    this.g = paramString6;
    this.h = paramString7;
    this.i = paramString8;
    this.j = paramString9;
    this.k = paramString10;
    this.l = paramString11;
    this.y = paramBoolean2;
    this.z = paramBoolean3;
  }

  public boolean a()
  {
    return this.a;
  }

  public String b()
  {
    return this.b;
  }

  public String c()
  {
    return this.c;
  }

  public String d()
  {
    return this.d;
  }

  public String e()
  {
    return this.e;
  }

  public String f()
  {
    return this.f;
  }

  public String g()
  {
    return this.g;
  }

  public String h()
  {
    return this.h;
  }

  public String i()
  {
    return this.i;
  }

  public String j()
  {
    return this.j;
  }

  public String k()
  {
    return this.k;
  }

  public String l()
  {
    return this.l;
  }

  public String m()
  {
    return this.m;
  }

  public String n()
  {
    return this.n;
  }

  public String o()
  {
    return this.o;
  }

  public String p()
  {
    return this.p;
  }

  public String q()
  {
    return this.q;
  }

  public String r()
  {
    return this.r;
  }

  public String s()
  {
    return this.s;
  }

  public String t()
  {
    return this.t;
  }

  public String u()
  {
    return this.u;
  }

  public String v()
  {
    return this.v;
  }

  public String w()
  {
    return this.w;
  }

  public String x()
  {
    return this.x;
  }

  boolean y()
  {
    return this.y;
  }

  boolean z()
  {
    return this.z;
  }
}

class ModelE
{
  String a;
  String b;
  String c;

  public ModelE(String paramString1, String paramString2)
  {
    this.a = paramString1;
    this.b = paramString2;
  }

  public String a()
  {
    return this.c;
  }

  public String b()
  {
    return this.a;
  }

  public String c()
  {
    return this.b;
  }
}